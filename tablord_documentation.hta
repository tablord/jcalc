<!DOCTYPE html>
<HTML sizset="0" sizcache="1" APPLICATIONNAME="D:\Documents\programmation\tablord\tablord\tablord_documentation.hta" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg = "http://www.w3.org/2000/svg" XMLNS:HTA><HEAD><HTA:APPLICATION APPLICATIONNAME="tablord:General documentation" SCROLL="yes" SINGLEINSTANCE="yes"></HTA:APPLICATION><LINK rel=stylesheet type=text/css href="tablord.css" src="tablord.css">
<SCRIPT src="jquery-1.5.1.min.js"></SCRIPT>

<SCRIPT src="tablordEdi.js"></SCRIPT>

<SCRIPT src="units.js"></SCRIPT>

<SCRIPT src="tablord.js"></SCRIPT>

<SCRIPT src="axe.js"></SCRIPT>

<SCRIPT src="simulation.js"></SCRIPT>

<SCRIPT src="BOM.js"></SCRIPT>

<SCRIPT src="sys.js"></SCRIPT>

<SCRIPT src="ocrRdy.js"></SCRIPT>

<SCRIPT src="finance.js"></SCRIPT>

<SCRIPT src="diff.js"></SCRIPT>
</HEAD>
<BODY sizset="0" sizcache="1"  designMode="on" showCode="true" showCut="true" showTest="true" showTrace="true">
<DIV id=menu class=TOOLBAR style="MAX-WIDTH: 50%; FLOAT: right">
<DIV><BUTTON onclick=tb.execUntilSelected(); id=runUntilSelectedBtn style="HEIGHT: 23px; WIDTH: 43px; COLOR: #8dff60">&#9658;|</BUTTON><BUTTON onclick=tb.execAll(); id=runAllBtn style="HEIGHT: 23px; WIDTH: 43px; COLOR: #8dff60" >&#9658;&#9658;</BUTTON><BUTTON onclick=tb.clearTimers(); disabled id=stopAnimation style="HEIGHT: 23px; WIDTH: 43px; COLOR: red">&#9632;</BUTTON><BUTTON onclick=tb.clearOutputs(); id=clearOutputsBtn style="HEIGHT: 23px; WIDTH: 43px">clear</BUTTON><BUTTON onclick=tb.save(); id=saveBtn class=WARNING style="HEIGHT: 23px; WIDTH: 43px" >save</BUTTON><BUTTON onclick=tb.print(); style="HEIGHT: 23px; WIDTH: 43px">print</BUTTON><BUTTON onclick=tb.helpPanel$.toggle(100); style="HEIGHT: 23px; WIDTH: 43px">help</BUTTON><INPUT onclick=tb.showCode(event) CHECKED type=checkbox>codes</INPUT><INPUT onclick=tb.showCut(event) CHECKED type=checkbox>cuts</INPUT><INPUT onclick=tb.showTest(event) CHECKED type=checkbox>tests</INPUT><INPUT onclick=tb.showTrace(event) CHECKED type=checkbox>traces</INPUT><INPUT onclick=tb.setAutoRun(event) CHECKED type=checkbox>auto run</INPUT></DIV>
<DIV style="POSITION: ; ZOOM: 1; FILTER:  ; DISPLAY: none" ><SPAN id=codeId>no selection</SPAN><BUTTON onclick=tb.cutBlock(tb.selectedElement); id=cutBtn style="HEIGHT: 23px; WIDTH: 43px">cut</BUTTON><BUTTON onclick="tb.templates[tb.templateChoice$.val()].insertBefore(tb.selectedElement,tb.currentContainer$.attr('container'))" style="HEIGHT: 23px; WIDTH: 43px">&#8593;</BUTTON><BUTTON onclick="tb.templates[tb.templateChoice$.val()].convert(tb.selectedElement,tb.currentContainer$.attr('container'))" style="HEIGHT: 23px; WIDTH: 43px">&#8596;</BUTTON><SELECT><OPTION selected value=code>code</OPTION><OPTION value=richText>richText</OPTION><OPTION value=section>section</OPTION><OPTION value=paste>paste</OPTION><OPTION value=person>person</OPTION></SELECT><BUTTON onclick="tb.templates[tb.templateChoice$.val()].insertAfter(tb.selectedElement,tb.currentContainer$.attr('container'))" style="HEIGHT: 23px; WIDTH: 43px">&#8595;</BUTTON><BUTTON onclick=tb.showOutputHtml(this); id=showHtmlBtn style="HEIGHT: 23px; WIDTH: 43px">&#8594;html</BUTTON><BUTTON onclick=tb.copyOutputToTest(this); id=toTestBtn style="HEIGHT: 23px; WIDTH: 43px">&#8594;test</BUTTON>
<DIV id=objectToolBar></DIV></DIV>
<DIV><SPAN onclick=tb.helpPanel$.hide(300) style="CURSOR: pointer; COLOR: red">&nbsp;×&nbsp;</SPAN><INPUT ><SPAN onclick=tb.help.index.back() style="CURSOR: pointer; COLOR: #8dff60">&#9668;</SPAN>
<DIV style="OVERFLOW: auto; MAX-HEIGHT: 400px">please type your search above</DIV></DIV></DIV>
<DIV id=tbContent class=CONTAINER sizset="0" sizcache="1" container="sectionContent"><PRE id=code0170 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.credits</PRE>
<DIV id=out0170 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Tablord</TD></TR>
<TR>
<TH vAlign=top>version</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>0.1</TD></TR>
<TR>
<TH vAlign=top>authors</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Marc&nbsp;Nicole</TD></TR>
<TR>
<TH vAlign=top>rights</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>CC-BY-SA&nbsp;2018</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=sect0003 class="SECTION ELEMENT">
<H1 class="SECTIONTITLE EDITABLE" contentEditable=false>1 table of content</H1>
<DIV container="sectionContent">
<DIV class="ELEMENT EMPTY" contentEditable=false>empty container: click here to add an element</DIV></DIV></DIV><PRE id=code0002 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.tableOfContent</PRE>
<DIV id=out0002 class="OUTPUT SUCCESS">
<DIV class=INTERACTIVE>
<DIV class=TOC0>1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0003">table of content</A></DIV>
<DIV class=TOC0>2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0004">Introduction</A></DIV>
<DIV class=TOC1>2.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0006">What is Tablord?</A></DIV>
<DIV class=TOC1>2.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0007">Fundamentals of Tablord</A></DIV>
<DIV class=TOC1>2.3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0005">What is not Tablord</A></DIV>
<DIV class=TOC1>2.4 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0015">Basic block of Tablord</A></DIV>
<DIV class=TOC2>2.4.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0018">Section</A></DIV>
<DIV class=TOC2>2.4.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0020">Rich Text</A></DIV>
<DIV class=TOC3>2.4.2.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0045">code reformating {{&nbsp;}}</A></DIV>
<DIV class=TOC2>2.4.3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0022">code</A></DIV>
<DIV class=TOC1>2.5 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0229">Template block</A></DIV>
<DIV class=TOC2>2.5.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0233">jc.template</A></DIV>
<DIV class=TOC3>2.5.1.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0241">tb.getItems$(url)&nbsp; and&nbsp; $.getData()</A></DIV>
<DIV class=TOC3>2.5.1.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0247">$.getMicrodata()</A></DIV>
<DIV class=TOC1>2.6 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0069">Code Execution </A></DIV>
<DIV class=TOC2>2.6.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0213">Run Until Selected button or ctrl-Enter</A></DIV>
<DIV class=TOC2>2.6.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0215">Run All and auto run</A></DIV>
<DIV class=TOC0>3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0070">the Tablordlibrary</A></DIV>
<DIV class=TOC1>3.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0076">Variable declaration</A></DIV>
<DIV class=TOC2>3.1.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0107">Naming conventions</A></DIV>
<DIV class=TOC2>3.1.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0085">Unit support</A></DIV>
<DIV class=TOC1>3.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0173">view the result</A></DIV>
<DIV class=TOC2>3.2.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0186">jc.inspect</A></DIV>
<DIV class=TOC2>3.2.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0202">jc.help</A></DIV>
<DIV class=TOC1>3.3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0143">General methods</A></DIV>
<DIV class=TOC2>3.3.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0145">toString</A></DIV>
<DIV class=TOC2>3.3.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0152">valueOf</A></DIV>
<DIV class=TOC2>3.3.3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0148">span</A></DIV>
<DIV class=TOC2>3.3.4 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0150">view</A></DIV>
<DIV class=TOC2>3.3.5 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0154">method chaining</A></DIV>
<DIV class=TOC1>3.4 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0095">Table</A></DIV>
<DIV class=TOC2>3.4.1 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0119">span</A></DIV>
<DIV class=TOC2>3.4.2 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0126">sort</A></DIV>
<DIV class=TOC2>3.4.3 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0136">addRows</A></DIV>
<DIV class=TOC2>3.4.4 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0225">edit</A></DIV>
<DIV class=TOC1>3.5 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0209">output</A></DIV>
<DIV class=TOC1>3.6 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0158">function delaration</A></DIV>
<DIV class=TOC0>4 <A href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0047">known issue:</A></DIV></DIV></DIV>
<DIV id=sect0004 class="SECTION ELEMENT" sizset="3" sizcache="1">
<H1 class="SECTIONTITLE EDITABLE" contentEditable=false>2 Introduction</H1>
<DIV sizset="3" sizcache="1" container="sectionContent">
<DIV id=sect0006 class="SECTION ELEMENT" sizset="3" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.1 What is <SPAN id=code0008 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0008 class="OUTPUT SUCCESS">Tablord</SPAN>?</H2>
<DIV sizset="3" sizcache="1" container="sectionContent">
<DIV id=rich0004 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="3" sizcache="1">
<P>A bit of Word, a bit of wikipedia, a bit of Excel and a bit of python "notebook".</P>
<P sizset="3" sizcache="1"><SPAN id=code0009 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0009 class="OUTPUT SUCCESS">Tablord</SPAN></P>is born out a frustration: if you want to do a descent report for a scientific publication or a business plan, or any document that mixes both text and some calculation (in fact almost anything that is not poetry), you eventually come to a big dilema: should I use Word our should I use Excel? of course Word because I need quite a lot of explanation and of course Ecel because I use quite a bit of calculation. At the end, you cut and paste excel tables in Word. So far so good (in fact already some pain, but ok, worth the pain). But then the good news is someone read your work! Here is the bad news: someone read your work, find it very interresting and "just" point out: "what about if &#8364; / $ is 10% higher?" Ouuups! of course, most probably you can change some cells in Excel and it will do the maths... and then you cut &amp; paste again in Word, re-read all the text to see where you included some figure that now are no longer valid and and and... you fear the next question since you realize this job is very time consuming. 
<P></P>
<P>&nbsp;</P>
<P>The second frustration comes from Excel itself: as long as you do some simple calculation, this is extreamly efficient. but as soon as you start to do some complex work, this becomes extremely frustrating since complex equations with meaningless cells name like A3+C5+D2/2 are almost impossible to maintain.</P>
<P>As well as surprisingly, all situation where you have a certain number of tables of data: it become very complicated since the presentation of data enter in conflict with the maintnability of the sheet. Excel has some good functions but most people don't know them because it becomes extremly difficult to manage.</P>
<P>&nbsp;</P>
<P>I past position I faced many time this dilemna and dreamed of something better, or at least different. At that time I was impressed by wikipedia, that has some very specific macro mecanisme that helps to do some job, but could not replace Excel and python Notebook that is excellent to do complex maths, but has almost no capability to edit text. and notebook is relativelly complex to install, so not for anyone.</P>
<P>&nbsp;</P>
<P>Of course had no time to make this dream come true, but as life is a continuous surprise, all of a sudden I had too much time... this was&nbsp;<STRONG>the</STRONG> occasion to make this dream come true</P></DIV></DIV></DIV>
<DIV id=sect0007 class="SECTION ELEMENT" sizset="4" sizcache="0">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.2 Fundamentals of <SPAN id=code0010 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0010 class="OUTPUT SUCCESS">Tablord</SPAN></H2>
<DIV container="sectionContent">
<DIV id=rich0008 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>The fundamentals are</P>
<UL>
<LI>Web based: browser based, so&nbsp;decently OS independent, very strong ecosystem. No fat client (in fact the fat is included in the browser) 
<LI>all maths are JavaScript and al least on the beginning only on the client side. JavaScript is very well supported, so no short term risk of obsolessence and even if I personnally find python more elegant than JavaScript, JavaScript deserves to be considered as a very powerfull language, and of course it has plenty of open source libraries to be used inside tablord. <STRONG>no special language</STRONG> just plain Java-Script 
<LI>simple file based system for the beginning. In the future some work will be done in servers. 
<LI>A system that can mix text and calculation in a very fluid manner</LI></UL>
<P>&nbsp;</P></DIV></DIV></DIV>
<DIV id=sect0005 class="SECTION ELEMENT" sizset="6" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.3 What is not <SPAN id=code0011 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0011 class="OUTPUT SUCCESS">Tablord</SPAN></H2>
<DIV sizset="6" sizcache="1" container="sectionContent">
<DIV id=rich0006 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="6" sizcache="1"><SPAN id=code0012 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0012 class="OUTPUT SUCCESS">Tablord</SPAN>is not Excel compatible, nor Word compatible etc... You suffer in one of this software... well you will probably continue to suffer for a while to tweek macros as long as you do not have the courage to jump to <SPAN id=code0013 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0013 class="OUTPUT SUCCESS">Tablord</SPAN></DIV></DIV></DIV>
<DIV id=sect0015 class="SECTION ELEMENT" sizset="9" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.4 Basic block of <SPAN id=code0017 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0017 class="OUTPUT SUCCESS">Tablord</SPAN></H2>
<DIV sizset="9" sizcache="1" container="sectionContent">
<DIV id=rich0016 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="9" sizcache="1">
<P sizset="9" sizcache="1">A <SPAN id=code0019 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0019 class="OUTPUT SUCCESS">Tablord</SPAN>document is composed of some basic block </P></DIV>
<DIV id=sect0018 class="SECTION ELEMENT" sizset="10" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.4.1 Section</H3>
<DIV sizset="10" sizcache="1" container="sectionContent">
<DIV id=rich0023 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="10" sizcache="1">
<P>A section is a container that structures the text in chapter, sub chapter etc... </P>
<P sizset="10" sizcache="1">Sections will be automatically numbered and taken into account in the <SPAN id=code0021 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.link("table of content")</SPAN><SPAN id=out0021 class="OUTPUT SUCCESS"><A class=LINK href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0003">table of content</A></SPAN></P>that links can be made&nbsp;<SPAN id=code0035 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.link("tb.link")</SPAN><SPAN id=out0035 class="OUTPUT SUCCESS"><SPAN title="#tb.link is not found in the table of content" class=INVALIDLINK>tb.link</SPAN></SPAN>&nbsp; 
<P></P>
<P>A section is a title and a container of other blocks.</P>
<P>Identation is managed automatically.</P></DIV></DIV></DIV>
<DIV id=sect0020 class="SECTION ELEMENT" sizset="13" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.4.2 Rich Text</H3>
<DIV sizset="13" sizcache="1" container="sectionContent">
<DIV id=rich0022 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>A Rich Text element consists of a simple HTML editor.</P></DIV>
<DIV id=sect0045 class="SECTION ELEMENT" sizset="13" sizcache="1">
<H4 class="SECTIONTITLE EDITABLE" contentEditable=false>2.4.2.1 code reformating <SPAN id=code0054 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{ \}\}'</SPAN><SPAN id=out0054 class="OUTPUT SUCCESS">{{&nbsp;}}</SPAN></H4>
<DIV sizset="13" sizcache="1" container="sectionContent">
<DIV id=rich0046 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="13" sizcache="1">Inside Rich Text, code can be&nbsp;inserted&nbsp;by using the <SPAN id=code0272 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{...\}\}'</SPAN><SPAN id=out0272 class="OUTPUT SUCCESS" sizset="14" sizcache="1">{{...}}</SPAN>&nbsp;syntaxe. for example, writing <SPAN id=code0309 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{3+5\}\}'</SPAN><SPAN id=out0309 class="OUTPUT SUCCESS" sizset="16" sizcache="1">{{3+5}}</SPAN>&nbsp;will transform into a code block having <STRONG><EM>3+5</EM></STRONG>&nbsp;as code and an output block like this <SPAN id=code0029 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">3+5</SPAN><SPAN id=out0029 class="OUTPUT SUCCESS">8</SPAN>&nbsp;(&lt;-- just click here to edit and understand how this works) 
<P>&nbsp;</P>
<P sizset="16" sizcache="1">when you click on a rich text block, one will see all <SPAN id=code0044 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.link('code')</SPAN><SPAN id=out0044 class="OUTPUT SUCCESS"><A class=LINK href="file:///D:/Documents/programmation/tablord/tablord/tablord_documentation.hta#sect0022">code</A></SPAN> 
<P>There are 2 short cuts</P>
<P sizset="17" sizcache="1"><SPAN id=code0284 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{#...\}\}'</SPAN><SPAN id=out0284 class="OUTPUT SUCCESS" sizset="20" sizcache="1">{{#...}}</SPAN>&nbsp; is transformed into a <STRONG>tb.link('...')</STRONG></P>
<P sizset="18" sizcache="1"><SPAN id=code0310 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{##...\}\}'</SPAN><SPAN id=out0310 class="OUTPUT SUCCESS" sizset="22" sizcache="1">{{##...}}</SPAN> is transformed into a tb.elementBox('...')</P>when you run the sheet or change of selected elements, the edited element will be transformed so that <SPAN id=code0317 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">'\{\{..code..\}\}'</SPAN><SPAN id=out0317 class="OUTPUT SUCCESS">{{..code..}}</SPAN> is transformed in a EMBEEDED CODE element</DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0022 class="SECTION ELEMENT" sizset="19" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.4.3 code</H3>
<DIV sizset="19" sizcache="1" container="sectionContent">
<DIV id=rich0063 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>A code section is very similar to the one that is created within Rich Text but consist of one block in itself</P>
<P>usually, this is intended for either a bunch of variable declaration, calculation and other, while within Rich Text this is more "showing the result of some already calculated variables".</P>
<P>&nbsp;</P>
<P>code is followed by an output division and has an optional test element below a complete example</P></DIV><PRE id=code0064 class="CODE ELEMENT EDITABLE" contentEditable=false>10+12</PRE>
<DIV id=out0064 class="OUTPUT SUCCESS">22</DIV>
<DIV id=test0064 class="TEST SUCCESS">22</DIV>
<DIV id=rich0065 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="20" sizcache="1">The <SPAN id=code0068 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.html('&lt;span class=CODEEXAMPLE&gt;code&lt;/span&gt;')</SPAN><SPAN id=out0068 class="OUTPUT SUCCESS"><SPAN class=CODEEXAMPLE>code</SPAN></SPAN>is followed by an <SPAN id=code0073 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.html('&lt;span class="OUTPUTEXAMPLE SUCCESS"&gt;output&lt;/span&gt;')</SPAN><SPAN id=out0073 class="OUTPUT SUCCESS"><SPAN class="OUTPUTEXAMPLE SUCCESS">output</SPAN></SPAN>and followed by an optionnal&nbsp;<SPAN id=code0066 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.html('&lt;span class=TESTEXAMPLE&gt;testElement&lt;/span&gt;')</SPAN><SPAN id=out0066 class="OUTPUT SUCCESS"><SPAN class=TESTEXAMPLE>testElement</SPAN></SPAN></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0229 class="ELEMENT SECTION" sizset="23" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.5 Template block</H2>
<DIV class=CONTAINER sizset="23" sizcache="1" container="sectionContent">
<DIV id=rich0234 class="ELEMENT RICHTEXT EDITABLE" contentEditable=false>In addition to the basic blocks, the user can define Template block and use them. Technically speaking, code, richText and section blocks also are templates, but they are defined in the EDI.</DIV>
<DIV id=sect0233 class="ELEMENT SECTION" sizset="23" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.5.1 jc.template</H3>
<DIV class=CONTAINER sizset="23" sizcache="1" container="sectionContent"><PRE id=code0235 class="ELEMENT CODE EDITABLE" contentEditable=false>tb.help(tb.template)</PRE>
<DIV id=out0235 class="OUTPUT SUCCESS"><SPAN class=HELP><B>function(newTemplate,itemprop)</B><BR>create a new template and register it <BR>it will inherit from tb.Template <BR>
<DT><SPAN class=PARAMETER>newTemplate</SPAN>:
<DD>is a simple object that must at least define <BR>
<DT>.name:
<DD>a name like an id optionaly followed by #version <BR><BR>and must define one of the 3 <BR>
<DT>.fields:
<DD>{field1:{options},field2:{options}....} <BR>field1 is the name of the field if field name ends with [] the field is an array of values <BR><BR>options is an object <BR>types <BR>
<DT>number:{}
<DD>the field is a number <BR>
<DT>string:{}
<DD>the field is a string: default if nothing is specified <BR>
<DT>func:function(data){...}
<DD>the field is calculated (=&gt; readonly) and the html is the result of this function <BR>
<DT>select:{choice1:val1,choice2:val2...)
<DD>the field is a SELECT <BR>
<DT>container:"template1
<DD>template2" <BR>a container that accepts the specified template names and how the <SPAN class=PARAMETER>itemprop</SPAN> . if "", accepts anything <BR><BR>formating <BR>
<DT>label:
<DD>specifies the label in front of the field. by default fieldName <BR><BR>if fields is defined, standard html code will automatically be generated <BR>so do not define .fields if you want to define .html <BR>
<DT>.html:
<DD>a string representing the html code of the template <BR>
<DT>.element$:
<DD>a function() returning a DOM Element; normally not defined and inherited form tb.Template <BR></SPAN></DD></DIV><PRE id=code0236 class="ELEMENT CODE EDITABLE" contentEditable=false>tb.template({name:'person',fields:{firstName:{},middleName:{},lastName:{}}})</PRE>
<DIV id=out0236 class="OUTPUT SUCCESS">template person created [<A href="http://tablord.com/templates/person">http://tablord.com/templates/person</A>]</DIV><PRE id=code0238 class="ELEMENT CODE EDITABLE" contentEditable=false>tb.templates</PRE>
<DIV id=out0238 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>code</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>template&nbsp;code&nbsp;created&nbsp;[http://tablord.com/templates/code]</TD></TR>
<TR>
<TH vAlign=top>richText</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>template&nbsp;richText&nbsp;created&nbsp;[http://tablord.com/templates/richText]</TD></TR>
<TR>
<TH vAlign=top>section</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>template&nbsp;section&nbsp;created&nbsp;[http://tablord.com/templates/section]</TD></TR>
<TR>
<TH vAlign=top>paste</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>template&nbsp;paste&nbsp;created&nbsp;[http://tablord.com/templates/paste]</TD></TR>
<TR>
<TH vAlign=top>person</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>template&nbsp;person&nbsp;created&nbsp;[http://tablord.com/templates/person]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0239 class="ELEMENT RICHTEXT EDITABLE" contentEditable=false>
<P>then a template can be inserted in the text like any other block by selecting this template in the block pick list. </P>
<P>Note that once inserted, the block is not "live" i.e. any change to the template definition will not be automatically reflected.</P></DIV>
<DIV class=ELEMENT itemscope itemtype="http://tablord.com/templates/person.html">
<TABLE width="100%">
<TBODY>
<TR>
<TH>firstName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="firstName">Marc</DIV></TD></TR>
<TR>
<TH>middleName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="middleName">Olivier</DIV></TD></TR>
<TR>
<TH>lastName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="lastName">Nicole</DIV></TD></TR></TBODY></TABLE></DIV>
<DIV class=ELEMENT itemscope itemtype="http://tablord.com/templates/person.html">
<TABLE width="100%">
<TBODY>
<TR>
<TH>firstName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="firstName">Don</DIV></TD></TR>
<TR>
<TH>middleName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="middleName">H</DIV></TD></TR>
<TR>
<TH>lastName</TH>
<TD class=LEFT width="90%">
<DIV class="FIELD EDITABLE" contentEditable=false itemprop="lastName">Smith</DIV></TD></TR></TBODY></TABLE></DIV>
<DIV id=sect0241 class="ELEMENT SECTION" sizset="26" sizcache="1">
<H4 class="SECTIONTITLE EDITABLE" contentEditable=false>2.5.1.1 tb.getItems$(url)&nbsp; and&nbsp; $.getData()</H4>
<DIV class=CONTAINER sizset="26" sizcache="1" container="sectionContent">
<DIV id=rich0242 class="ELEMENT RICHTEXT EDITABLE" contentEditable=false>In order to get the data of templates, one can use the <STRONG>tb.getItems$()</STRONG> function that return a jquery with all element that are an item of the type specified by the url&nbsp;followed by the&nbsp;extension of jQuery <STRONG>.getData()</STRONG> that return an array of objects, which is handy to create tables. Please note that the search of template is done on the <STRONG>entire</STRONG> document as it is at the time of the code execution. Normally this is not an issue since template are mostly used as a way to enter manually structured data, but it can become of concern if some template block are created programmatically within the document.</DIV><PRE id=code0240 class="ELEMENT CODE EDITABLE" contentEditable=false>tb.inspect(tb.getItems$('http://tablord.com/templates/person.html').getData(),10)</PRE>
<DIV id=out0240 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Marc"</SPAN></TD></TR>
<TR>
<TH vAlign=top>middleName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Olivier"</SPAN></TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Nicole"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Don"</SPAN></TD></TR>
<TR>
<TH vAlign=top>middleName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"H"</SPAN></TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Smith"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0243 class="ELEMENT CODE EDITABLE" contentEditable=false>table().addRows(tb.getItems$('http://tablord.com/templates/person.html').getData())</PRE>
<DIV id=out0243 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>firstName</TH>
<TH>middleName</TH>
<TH>lastName</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">Marc</TD>
<TD style="TEXT-ALIGN: left">Olivier</TD>
<TD style="TEXT-ALIGN: left">Nicole</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">Don</TD>
<TD style="TEXT-ALIGN: left">H</TD>
<TD style="TEXT-ALIGN: left">Smith</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=sect0247 class="ELEMENT SECTION" sizset="28" sizcache="1">
<H4 class="SECTIONTITLE EDITABLE" contentEditable=false>2.5.1.2 $.getMicrodata()</H4>
<DIV sizset="28" sizcache="1" container="sectionContent">
<DIV id=rich0248 class="ELEMENT RICHTEXT EDITABLE" contentEditable=false>for a more general purpose use but also more complex use, you can use the <STRONG>.getMicrodata()</STRONG> extension method of jQuery. the result is complient with the microdata API.</DIV><PRE id=code0249 class="ELEMENT CODE EDITABLE" contentEditable=false>tb.inspect(tb.getItems$('http://tablord.com/templates/person.html').getMicrodata(),10)</PRE>
<DIV id=out0249 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>items</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>id</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class="INSPECT META">undefined</SPAN></TD></TR>
<TR>
<TH vAlign=top>type</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"http://tablord.com/templates/person.html"</SPAN></TD></TR>
<TR>
<TH vAlign=top>properties</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Marc"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>middleName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Olivier"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Nicole"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>id</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class="INSPECT META">undefined</SPAN></TD></TR>
<TR>
<TH vAlign=top>type</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"http://tablord.com/templates/person.html"</SPAN></TD></TR>
<TR>
<TH vAlign=top>properties</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Don"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>middleName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"H"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Smith"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0069 class="SECTION ELEMENT" sizset="29" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>2.6 Code Execution </H2>
<DIV sizset="29" sizcache="1" container="sectionContent">
<DIV id=sect0213 class="SECTION ELEMENT" sizset="29" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.6.1 Run Until Selected button or ctrl-Enter</H3>
<DIV sizset="29" sizcache="1" container="sectionContent">
<DIV id=rich0219 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="29" sizcache="1">
<P sizset="29" sizcache="1">While editing an element, you can either click on the "run until selected" <SPAN id=code0216 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.html($('#runUntilSelectedBtn')[0].outerHTML)</SPAN><SPAN id=out0216 class="OUTPUT SUCCESS"><BUTTON onclick=tb.execUntilSelected(); id=runUntilSelectedBtn style="HEIGHT: 23px; WIDTH: 43px; COLOR: #8dff60">&#9658;|</BUTTON></SPAN></P>or press ctrl-Enter. Both will run all code element until (and including) the currently selected Element. 
<P></P>
<P>Please note that every run is done in a new fresh environnement, so every previously declared variable through v, table... are deleted before execution.</P></DIV></DIV></DIV>
<DIV id=sect0215 class="SECTION ELEMENT" sizset="30" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>2.6.2 Run All and auto run</H3>
<DIV sizset="30" sizcache="1" container="sectionContent">
<DIV id=rich0217 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="30" sizcache="1">
<P>if the sheet is marked with auto run (by default) it will be executed fully on the openning of the sheet.</P>
<P sizset="30" sizcache="1">you can reexecute everything by pressing the run all button <SPAN id=code0218 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.html($('#runAllBtn')[0].outerHTML)</SPAN><SPAN id=out0218 class="OUTPUT SUCCESS"><BUTTON onclick=tb.execAll(); id=runAllBtn class=WARNING style="HEIGHT: 23px; WIDTH: 43px; COLOR: #8dff60" >&#9658;&#9658;</BUTTON></SPAN></P>. In both cases, the execution start by creating a fresh new variables environnement 
<P></P></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0070 class="SECTION ELEMENT" sizset="32" sizcache="1">
<H1 class="SECTIONTITLE EDITABLE" contentEditable=false>3 the <SPAN id=code0072 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0072 class="OUTPUT SUCCESS">Tablord</SPAN>library</H1>
<DIV sizset="32" sizcache="1" container="sectionContent">
<DIV id=rich0071 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false></DIV>
<DIV id=sect0076 class="SECTION ELEMENT" sizset="32" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.1 Variable declaration</H2>
<DIV sizset="32" sizcache="1" container="sectionContent">
<DIV id=rich0077 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="32" sizcache="1">
<P sizset="32" sizcache="1">the most uncommon part of <SPAN id=code0079 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0079 class="OUTPUT SUCCESS">Tablord</SPAN></P>for already knowlegable JavaScript users is how to declare variables. 
<P></P>
<P>As all calculation will occure in the client, technically speaking, all should impact the JavaScript environnement, which is very impractical. if you would declare a variable "window" nothing would be reachable anymore since "window" is <STRONG>the</STRONG> root of many things in browser JavaScript.</P>
<P>&nbsp;</P>
<P>In order to avoid this problem, variables are declared using the v function like below</P></DIV><PRE id=code0078 class="CODE ELEMENT EDITABLE" contentEditable=false>v('myVariable','its value')</PRE>
<DIV id=out0078 class="OUTPUT SUCCESS">its&nbsp;value</DIV>
<DIV id=rich0080 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>by doing so <STRONG>myVariable</STRONG> is created. In fact, <STRONG>v.myVariable</STRONG> is created with an object of class <STRONG>V</STRONG> and is referenced in <STRONG>jc.vars</STRONG></P>
<P>Any code is executed inside a <EM><STRONG>with(jc.vars)</STRONG></EM> which means that <STRONG>myVariable</STRONG> is directly accessible</P>
<P>so the following code will retrieve what was stored</P></DIV><PRE id=code0081 class="CODE ELEMENT EDITABLE" contentEditable=false>myVariable</PRE>
<DIV id=out0081 class="OUTPUT SUCCESS">its&nbsp;value</DIV>
<DIV id=rich0082 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>As <STRONG>myVariable</STRONG> is a object of class <STRONG>V</STRONG> it has some methods like <STRONG>.view</STRONG></DIV><PRE id=code0083 class="CODE ELEMENT EDITABLE" contentEditable=false>myVariable.view()</PRE>
<DIV id=out0083 class="OUTPUT SUCCESS"><VAR>myVariable</VAR> = <SPAN class=VALUE>its&nbsp;value</SPAN></DIV>
<DIV id=rich0084 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>this shows the name of the variable as well as its current value</P>
<P>&nbsp;</P>
<P>another practical tool is</P><PRE>jc.inspect()</PRE>
<P>&nbsp;</P></DIV><PRE id=code0098 class="CODE ELEMENT EDITABLE" contentEditable=false><P>tb.inspect(myVariable)</P></PRE>
<DIV id=out0098 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object tb.Var(myVariable):its value] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>myVariable</TD></TR>
<TR>
<TH vAlign=top>label</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>myVariable</TD></TR>
<TR>
<TH vAlign=top>value</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>its&nbsp;value</TD></TR>
<TR>
<TH vAlign=top>func</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>undefined</TD></TR>
<TR>
<TH vAlign=top>type</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>string</TD></TR>
<TR>
<TH vAlign=top>setName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(name)</B><BR>for internal use only <BR>changes the <SPAN class=PARAMETER>name</SPAN> of the variable and also <BR>updates .label and .unit <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>valueOf</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function ()</B><BR>return the value of the variable <BR>if the variable is in fact a function, executes the function and return its value <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function ()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>code</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>return the code of the embedded function if such a function exists <BR>or undefined if not a function <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>to</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(unit)</B><BR>return the value converted to <SPAN class=PARAMETER>unit</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>return the summary of the variable <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(options)</B><BR>returns an HTML object with VariableName = value <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>returns an HTML object with the necessary controls to edit the variable <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>generate the code that represents the element as edited <BR>can be used to replace the existing code <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>isV</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0099 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="37" sizcache="1">
<P sizset="37" sizcache="1">more will be detailled in <SPAN id=code0100 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.link("tb.inspect")</SPAN><SPAN id=out0100 class="OUTPUT SUCCESS"><SPAN title="#tb.inspect is not found in the table of content" class=INVALIDLINK>tb.inspect</SPAN></SPAN></P>but for now just take it as a good way to inspect anything and a way to get help on an object 
<P></P>
<P>&nbsp;</P>
<P>you can inspect anything, so you can also&nbsp;just type <STRONG>jc.vars</STRONG> to have a look of&nbsp;all declared variables.</P></DIV><PRE id=code0105 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.vars</PRE>
<DIV id=out0105 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>myVariable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;tb.Var(myVariable):its&nbsp;value]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0106 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>If you want to create a pure javaScript variable, just store it in jc.vars in order to avoid to polute to global name space.</P>
<P>this also has another benefice: jc.vars is cleared before any execution of the sheet (either full run or only run from the beginning to the current selection). Doing so prevents having a sheet that executes properly using a variable that was defined before but that is no longer in any code. This seems to work, but will no longer work once you reopen the sheet.</P></DIV><PRE id=code0223 class="CODE ELEMENT EDITABLE" contentEditable=false><P>tb.vars.myJavaScriptVariable1 = 5;</P><P>tb.vars.myJavaScriptVariable2 = $('#code0223');</P><P>tb.vars</P></PRE>
<DIV id=out0223 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>myVariable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;tb.Var(myVariable):its&nbsp;value]</TD></TR>
<TR>
<TH vAlign=top>myJavaScriptVariable1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>5</TD></TR>
<TR>
<TH vAlign=top>myJavaScriptVariable2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;JQuery]&nbsp;length:1</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=sect0107 class="SECTION ELEMENT" sizset="40" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.1.1 Naming conventions</H3>
<DIV sizset="40" sizcache="1" container="sectionContent">
<DIV id=rich0108 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="40" sizcache="1">
<P sizset="40" sizcache="1">In <SPAN id=code0109 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0109 class="OUTPUT SUCCESS">Tablord</SPAN></P>one should avoid starting a variable name by _ since those are reserved for the library usage (like _simulation). 
<P></P>
<P sizset="41" sizcache="1">If you do so, you will be sure that this name space is for you and no upgrade of <SPAN id=code0110 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0110 class="OUTPUT SUCCESS">Tablord</SPAN></P>will interfear in your variables. 
<P></P>
<P>For the rest, it's up to you, but common good practice for JavaScript is to camelCase every word but the first and avoid underscore.</P>
<P>&nbsp;</P>
<P>the library follows those common conventions:</P>
<P>a function stating with a CapitalCase is a constructor (~ a Class)</P></DIV></DIV></DIV>
<DIV id=sect0085 class="SECTION ELEMENT" sizset="42" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.1.2 Unit support</H3>
<DIV sizset="42" sizcache="1" container="sectionContent">
<DIV id=rich0086 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="42" sizcache="1">
<P sizset="42" sizcache="1">One on the very common programming mistake is to missmatch units, adding for example $ and &#8364; and of course having strange results. Unfortunally no modern language supports properly units (which is a shame). JavaScript is no exception :-( . So, even if this is far from perfect, some provision have been given in <SPAN id=code0088 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0088 class="OUTPUT SUCCESS">Tablord</SPAN></P>while remaining pure JavaScript. 
<P></P>
<P>&nbsp;</P>
<P>By convention the unit is located in the variable name after a <STRONG>$</STRONG> sign</P></DIV><PRE id=code0087 class="CODE ELEMENT EDITABLE" contentEditable=false>v('currentPrice$USD',1234).view()</PRE>
<DIV id=out0087 class="OUTPUT SUCCESS"><VAR>currentPrice</VAR> = <SPAN class=VALUE>1234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV><PRE id=code0089 class="CODE ELEMENT EDITABLE" contentEditable=false>currentPrice$USD</PRE>
<DIV id=out0089 class="OUTPUT SUCCESS">1234</DIV><PRE id=code0090 class="CODE ELEMENT EDITABLE" contentEditable=false>currentPrice$USD.unit</PRE>
<DIV id=out0090 class="OUTPUT SUCCESS">USD</DIV><PRE id=code0091 class="CODE ELEMENT EDITABLE" contentEditable=false>currentPrice$USD.label</PRE>
<DIV id=out0091 class="OUTPUT SUCCESS">currentPrice</DIV>
<DIV id=rich0092 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="47" sizcache="1">
<P sizset="47" sizcache="1">In the future some capability of unit convertion will be given. nothing prevents you to write code like <SPAN id=code0093 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.codeExample('currentPrice$USD-margin$EUR')</SPAN><SPAN id=out0093 class="OUTPUT SUCCESS"><SPAN class=CODEEXAMPLE>currentPrice$USD-margin$EUR</SPAN></SPAN> 
<P></P>but at least this notation makes you a little bit more aware of the problem.</DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0173 class="SECTION ELEMENT" sizset="48" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.2 view the result</H2>
<DIV sizset="48" sizcache="1" container="sectionContent">
<DIV id=rich0174 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>The simpliest method to view a result is just to execute a code that ends with some results like in a JavaScript console</P></DIV><PRE id=code0175 class="CODE ELEMENT EDITABLE" contentEditable=false>2+3</PRE>
<DIV id=out0175 class="OUTPUT SUCCESS">5</DIV>
<DIV id=rich0176 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="49" sizcache="1">in <SPAN id=code0178 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0178 class="OUTPUT SUCCESS">Tablord</SPAN>, when a piece of code returns a result, it will first look if this is a simple type and display it in a human format</DIV><PRE id=code0177 class="CODE ELEMENT EDITABLE" contentEditable=false>undefined</PRE>
<DIV id=out0177 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">undefined</SPAN></DIV><PRE id=code0179 class="CODE ELEMENT EDITABLE" contentEditable=false>''</PRE>
<DIV id=out0179 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">empty string</SPAN></DIV>
<DIV id=rich0182 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>note that this is close to the toString(), so an array will show like a list.</DIV><PRE id=code0180 class="CODE ELEMENT EDITABLE" contentEditable=false>[1,2,3]</PRE>
<DIV id=out0180 class="OUTPUT SUCCESS">1,2,3</DIV>
<DIV id=rich0183 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="53" sizcache="1">then if this is an object, it will try to use the <STRONG>span()</STRONG> method to get an decent html representation of the object. This works well on the <SPAN id=code0184 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0184 class="OUTPUT SUCCESS">Tablord</SPAN>library that consitently implement this method</DIV><PRE id=code0185 class="CODE ELEMENT EDITABLE" contentEditable=false><P>table('aTable')</P><P>.add({id:'zero',col1:1,col2:2,col3:3})</P><P>.add({id:'one' ,col1:10,col2:20,col3:30})</P><P>.add({id:'two' ,col1:100,col2:200,col3:300})</P></PRE>
<DIV id=out0185 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV><PRE id=code0197 class="CODE ELEMENT EDITABLE" contentEditable=false><P>function sum(a,b) {return a+b};</P><P>sum</P></PRE>
<DIV id=out0197 class="OUTPUT SUCCESS"></DIV>
<DIV id=sect0186 class="SECTION ELEMENT" sizset="56" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.2.1 jc.inspect</H3>
<DIV sizset="56" sizcache="1" container="sectionContent">
<DIV id=rich0187 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>sometime you need to be close to the technical result, and the native format is to ambigous. this is specially the case with array that looks very much like a string, specially if empty</P>
<P><STRONG>jc.inspect</STRONG> give you a better technical representation</P>
<P>&nbsp;</P></DIV><PRE id=code0188 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect(2+3)</PRE>
<DIV id=out0188 class="OUTPUT SUCCESS">5</DIV><PRE id=code0189 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect('toto')</PRE>
<DIV id=out0189 class="OUTPUT SUCCESS"><SPAN class=INSPECT>"toto"</SPAN></DIV><PRE id=code0190 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect([1,2])</PRE>
<DIV id=out0190 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>2</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0192 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect([])</PRE>
<DIV id=out0192 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0194 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect({toto:1,tutu:{firstName:'tutu',lastName:'Smith'}})</PRE>
<DIV id=out0194 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>toto</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>tutu</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0195 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>jc.inspect can also work at a certain level of depth. be carefull however that it can often generate very big amount of data if missused, also note that you can give a legend </DIV><PRE id=code0196 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect({toto:1,tutu:{firstName:'tutu',lastName:'Smith'}},2,'my legend')</PRE>
<DIV id=out0196 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} my legend</LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>toto</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>tutu</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>tutu</TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Smith</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0200 class="CODE ELEMENT EDITABLE" contentEditable=false><P>function sum(a,b) {return a+b};</P><P>sum.c= 5;</P><P>tb.inspect(sum)</P></PRE>
<DIV id=out0200 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>function sum(a,b) </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>c</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>5</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0201 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect(aTable,2,'another legend')</PRE>
<DIV id=out0201 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Table(aTable) of 3 rows] another legend</LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>index</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>0</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>val</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (col,value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR><SPAN class=PARAMETER>func</SPAN> must be function(colname,colObject) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>reduce</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(reduceF,criteria,initialValue)</B><BR>apply a reduce function on a column <BR><SPAN class=PARAMETER>criteria</SPAN> is an optional f(jcFunc) that process only row that return true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sum</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the sum of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>min</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>max</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>average</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the average of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rms</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the root mean square of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (options)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>index</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>val</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (col,value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR><SPAN class=PARAMETER>func</SPAN> must be function(colname,colObject) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>reduce</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(reduceF,criteria,initialValue)</B><BR>apply a reduce function on a column <BR><SPAN class=PARAMETER>criteria</SPAN> is an optional f(jcFunc) that process only row that return true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sum</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the sum of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>min</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>max</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>average</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the average of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rms</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the root mean square of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (options)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>index</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>2</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>val</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(col)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (col,value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR><SPAN class=PARAMETER>func</SPAN> must be function(colname,colObject) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>reduce</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(reduceF,criteria,initialValue)</B><BR>apply a reduce function on a column <BR><SPAN class=PARAMETER>criteria</SPAN> is an optional f(jcFunc) that process only row that return true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sum</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the sum of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>min</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>max</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the min of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>average</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the average of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rms</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the root mean square of the row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function (options)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"aTable"</SPAN></TD></TR>
<TR>
<TH vAlign=top>length</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>3</TD></TR>
<TR>
<TH vAlign=top>pk</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class="INSPECT META">undefined</SPAN></TD></TR>
<TR>
<TH vAlign=top>pks</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>cols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>id</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Col&nbsp;id]</TD></TR>
<TR>
<TH vAlign=top>col1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Col&nbsp;col1]</TD></TR>
<TR>
<TH vAlign=top>col2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Col&nbsp;col2]</TD></TR>
<TR>
<TH vAlign=top>col3</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Col&nbsp;col3]</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>options</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>tableStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>styles</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>left&nbsp;for&nbsp;not&nbsp;numbers</TD></TR>
<TR>
<TH vAlign=top>defValues</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>colOrder</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>id,col1,col2,col3</TD></TR>
<TR>
<TH vAlign=top>visibleCols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>set</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(value /*,path*/)</B><BR>set the <SPAN class=PARAMETER>value</SPAN> of the property of this.path1.path2... and creates, if needed the intermediate objects <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>get</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(/*path*/)</B><BR>applied as a method (either declare MyClass.prototype.get = tb.get or tb.get.call(obj,path) <BR>returns this.path1.path2.path3 or undefined if at any stage it becomes undefined <BR>and search also in this.parent is case of undefined property <BR>enables a cascad search of a property <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rename</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(name)</B><BR>if <SPAN class=PARAMETER>name</SPAN> is undefined return the <SPAN class=PARAMETER>name</SPAN> <BR>otherwise set a new <SPAN class=PARAMETER>name</SPAN> and return this <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>registerPk</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>primaryKey</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(pkCol)</B><BR>set the primary key colName <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>defCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(name, defValue, style)</B><BR>set the column attribute <BR><BR><SPAN class=PARAMETER>defValue</SPAN> is the value that is used when a new Row is added and that column is not defined <BR>it can be a JavaScript value (number, object.. or an f(jcFunc) <BR>the style if set will call colStyle <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>updateCols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(withRow)</B><BR>updates the cols description with the fields found in <SPAN class=PARAMETER>withRow</SPAN> <BR>normally for internal use only <BR>return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>colOrder</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(order)</B><BR>if <SPAN class=PARAMETER>order</SPAN> = array of colName: set a new <SPAN class=PARAMETER>order</SPAN> <BR>if <SPAN class=PARAMETER>order</SPAN> == undefined return the current <SPAN class=PARAMETER>order</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>show</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns,visible)</B><BR>show all <SPAN class=PARAMETER>columns</SPAN> specified in the <SPAN class=PARAMETER>columns</SPAN> array <BR>if <SPAN class=PARAMETER>visible</SPAN> = true or undefined, ensure this <SPAN class=PARAMETER>columns</SPAN> are <SPAN class=PARAMETER>visible</SPAN> if it exist <BR>if <SPAN class=PARAMETER>visible</SPAN> = false, ensure this <SPAN class=PARAMETER>columns</SPAN> are hidden <BR>if <SPAN class=PARAMETER>visible</SPAN> = null, reset to the default (specialy for View) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>hide</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>showOnly</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>add</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row)</B><BR>add a <SPAN class=PARAMETER>row</SPAN> <BR><SPAN class=PARAMETER>row</SPAN> can be either a simple object or a Row object <BR>return the table for method chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>addRows</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(rows)</B><BR>add multiple <SPAN class=PARAMETER>rows</SPAN> <BR><SPAN class=PARAMETER>rows</SPAN> must be an array or array-like of objects <BR>columns are ajusted automatically <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>update</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(cols,keepOnlyValue)</B><BR><SPAN class=PARAMETER>cols</SPAN> is an object {colName:value,....} <BR>value can be a simple value like a number or a string, <BR>but can also be a jcFunc produced by f(jcFunc) <BR>that will either be stored in the table <BR>or be used during the update to calculate the static value of the cell <BR>if <SPAN class=PARAMETER>keepOnlyValue</SPAN> == true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>forEachRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR>execute <SPAN class=PARAMETER>func</SPAN> for each row of the table <BR><SPAN class=PARAMETER>func</SPAN> must be function(i,row) in which this represents the Row object <BR>return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col)</B><BR>return the content of the cell: if the cell is a function: return the function <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>val</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col)</B><BR>return the VALUE of the cell: if a function, this function is calculated first <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>reduce</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,reduceF,criteria,initialValue)</B><BR>apply a reduce function on a column <BR><SPAN class=PARAMETER>criteria</SPAN> is an optional f(jcFunc) that process only row that return true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sum</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the sum of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>min</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the min of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>max</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the min of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>average</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the average of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rms</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the root mean square of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col,value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>lookup</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the data of the first row matching the <SPAN class=PARAMETER>criteria</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>tableStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>colStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style,colName)</B><BR>set the <SPAN class=PARAMETER>style</SPAN> for a column <BR><SPAN class=PARAMETER>style</SPAN> can be either an object of $.css() parameters <BR>or a function(data,col,value) where this represents the row object which is compatible with f("jcFunc") <BR>and which return an object of css parameters <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rowStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style,rowNumber)</B><BR>set the <SPAN class=PARAMETER>style</SPAN> for a row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>style</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(newStyle,rowNumber,colName)</B><BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>)
<DD>will set the default <SPAN class=PARAMETER>newStyle</SPAN> for the complete table <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,rowNumber)
<DD>will set the default style for a given row <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,undefined,<SPAN class=PARAMETER>colName</SPAN>)
<DD>will set the default style for a column <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,rowNumber,<SPAN class=PARAMETER>colName</SPAN>)
<DD>will set the style for a given cell <BR><SPAN class=PARAMETER>newStyle</SPAN> can either be an object {cssAttr=val,...} or a function(table,<SPAN class=PARAMETER>rowNumber</SPAN>,colName) <BR></SPAN></DD></TD></TR>
<TR>
<TH vAlign=top>compoundStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,colName,value)</B><BR>calculate the compound style for a given cell <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sort</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(cols)</B><BR>sort the table according to the "<SPAN class=PARAMETER>cols</SPAN>" criteria <BR><SPAN class=PARAMETER>cols</SPAN> is an object of the form: <BR>{ col1: 1 // 1 means ascending alphabetic or numeric order <BR>col2:-1 //-1 means descending alphabetic or numeric order <BR>col3: function(a,b) {... // any function that compare a and b and returns &gt;0 if a&gt;b, &lt;0 if a<B, 0 if a="=b" <br> return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>find</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return a new view of this table that has only the rows that match the <SPAN class=PARAMETER>criteria</SPAN> <BR>the rows of this view ARE THE ORIGINAL ROWS <BR>any function in a cell still refer to the original table. <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>findFirst</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>mongoDB find() as if the table was a small mongoDB <BR>return the first Row of this table that match the <SPAN class=PARAMETER>criteria</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>return a string summarizing the table <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>node$</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>display the table without its name <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>deprecated: only for backward compatibility: use node$ instead <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>display the table, including its name in a 
<DIV><BR></SPAN></DIV></TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(options)</B><BR>edit is similar to span, but gernerates HTML code in order to edit the object interactively <BR>it will also set the code to AUTOEDIT class which means that it should no longer be modified by the user since it will <BR>be generated by the edition mecanism. <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>generate the code that represents the element as edited <BR>can be used to replace the existing code <BR></SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV>
<DIV id=sect0202 class="SECTION ELEMENT" sizset="64" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.2.2 jc.help</H3>
<DIV sizset="64" sizcache="1" container="sectionContent">
<DIV id=rich0203 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>jc.help show the essential of a function</DIV><PRE id=code0204 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.help(v)</PRE>
<DIV id=out0204 class="OUTPUT SUCCESS"><SPAN class=HELP><B>function v(name,value)</B><BR>v(<SPAN class=PARAMETER>name</SPAN>) returns the variable <SPAN class=PARAMETER>name</SPAN>: rarely used since <SPAN class=PARAMETER>name</SPAN> alone will represent the same as well as tb.vars[<SPAN class=PARAMETER>name</SPAN>] <BR>v(<SPAN class=PARAMETER>name</SPAN>,value) creates a new variable if it does not already exists and sets a new <SPAN class=PARAMETER>value</SPAN> <BR></SPAN></DIV>
<DIV id=rich0206 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="65" sizcache="1">without parameters, jc.help show the help of <SPAN id=code0207 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0207 class="OUTPUT SUCCESS">Tablord</SPAN></DIV><PRE id=code0205 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.help()</PRE>
<DIV id=out0205 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"Tablord"</SPAN></TD></TR>
<TR>
<TH vAlign=top>version</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"0.1"</SPAN></TD></TR>
<TR>
<TH vAlign=top>authors</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Marc&nbsp;Nicole</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>rights</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"CC-BY-SA&nbsp;2018"</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>inspect</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(obj,depth,name)</B><BR>return an Inspector object so <SPAN class=PARAMETER>obj</SPAN> can be displayed either in an html or plain text context <BR>
<DT><SPAN class=PARAMETER>depth</SPAN>
<DD>(default 1) give at what <SPAN class=PARAMETER>depth</SPAN> object properties are also inspected <BR>
<DT><SPAN class=PARAMETER>name</SPAN>
<DD>(optional) gives a <SPAN class=PARAMETER>name</SPAN> to be shown in the display <BR></SPAN></DD></TD></TR>
<TR>
<TH vAlign=top>keys</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(obj)</B><BR>returns an Array with all keys (=non inherited properties) of an object <BR>replacement for ECMA5 <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>copy</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(obj)</B><BR>makes a copy of <SPAN class=PARAMETER>obj</SPAN> this version only copies the first level <BR>does not copy any inheritance (result is an Object instance) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>pad</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(integer,numberOfDigits)</B><BR>return a string representing the <SPAN class=PARAMETER>integer</SPAN>, by filling with 0 in order to return a constant <SPAN class=PARAMETER>numberOfDigits</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>inherit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class="INSPECT META">undefined</SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(html)</B><BR>transform the <SPAN class=PARAMETER>html</SPAN> content (from innerHTML) to a string as if this content is a text editor <BR>removes any tags other than <BR>and 
<P><BR></SPAN></P></TD></TR>
<TR>
<TH vAlign=top>toHtml</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(code)</B><BR>transform <SPAN class=PARAMETER>code</SPAN> in such a manner that the <SPAN class=PARAMETER>code</SPAN> can be visualised in a <PRE>...
<BR></SPAN></PRE></TD></TR>
<TR>
<TH vAlign=top>codeExample</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(example)</B><BR>return an html object with <SPAN class=PARAMETER>example</SPAN> wrapped in span class=CODEEXAMPLE <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>findInArrayOfObject</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria,a)</B><BR>find the first object in the array (or array like) of object <SPAN class=PARAMETER>a</SPAN> that has all <SPAN class=PARAMETER>criteria</SPAN> true <BR>example tb.findInArrayOfObject({toto:5},[{toto:1,tutu:5},{toto:5}]) <BR>will return 1 <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>help</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR>returns the signature of the function and the first comment in a pretty html <BR>followed by the content of the .<SPAN onclick="tb.help.index.show('help');" class=HELPLINK>help</SPAN>() static method of <SPAN class=PARAMETER>func</SPAN> if any <BR><SPAN class=PARAMETER>func</SPAN>: the function to be inspected <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>testStatus</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>set a finalize function that will write to the current output the number of test Failure <BR>in the section that includes the code that executes this function <BR>mostly used in a small code inside the title of a section to summerize the tests below <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>link</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class="INSPECT META">undefined</SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>converts</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(value,from,to)</B><BR>convert the <SPAN class=PARAMETER>value</SPAN> from unit "<SPAN class=PARAMETER>from</SPAN>" <SPAN class=PARAMETER>to</SPAN> "<SPAN class=PARAMETER>to</SPAN>" <BR>an error is thrown if the 2 units are not <SPAN class=PARAMETER>from</SPAN> the same type <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>symbole</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(unit)</B><BR>returns the "pretty" symbole for <SPAN class=PARAMETER>unit</SPAN> or <SPAN class=PARAMETER>unit</SPAN> itself if none if found <BR></SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0143 class="SECTION ELEMENT" sizset="67" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3 General methods</H2>
<DIV sizset="67" sizcache="1" container="sectionContent">
<DIV id=rich0144 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="67" sizcache="1">in the <SPAN id=code0146 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.name</SPAN><SPAN id=out0146 class="OUTPUT SUCCESS">Tablord</SPAN>there are some methods that all object implements</DIV>
<DIV id=sect0145 class="SECTION ELEMENT">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3.1 toString</H3>
<DIV container="sectionContent">
<DIV id=rich0147 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>the toString method is implemented on all Classes an returns a one line string summary of the object using the same format</P>
<P><STRONG>[object Class(instanceName) some high level information]</STRONG></P>
<P>this string is usefull if you want to have a short summary of the object. This is what jc.inspect uses to show the inside of the object.</P></DIV></DIV></DIV>
<DIV id=sect0152 class="SECTION ELEMENT">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3.2 valueOf</H3>
<DIV container="sectionContent">
<DIV id=rich0153 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>the most essential (if any) value caracterising the object. Normally returns a Number or a String.</DIV></DIV></DIV>
<DIV id=sect0148 class="SECTION ELEMENT">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3.3 span</H3>
<DIV container="sectionContent">
<DIV id=rich0149 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>returns a HTML object containing the html code of the representation for this object. span shows it with a &lt;SPAN&gt; tag or directly with the necessary tag (like &lt;TABLE&gt;) so that the representation can be embedded inside the text stream. Sometimes, span has optional parameters to specify how to display it</DIV></DIV></DIV>
<DIV id=sect0150 class="SECTION ELEMENT">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3.4 view</H3>
<DIV container="sectionContent">
<DIV id=rich0151 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>similar to span and also returns an HTML object, but displayed in a &lt;DIV&gt; and displaying more informations like the instance name or other usefull information</DIV></DIV></DIV>
<DIV id=sect0154 class="SECTION ELEMENT" sizset="68" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.3.5 method chaining</H3>
<DIV sizset="68" sizcache="1" container="sectionContent">
<DIV id=rich0155 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="68" sizcache="1">
<P>most methods returns the calling object excepted when the method clearly specifies another result. so method chaining is easy like</P>
<P sizset="68" sizcache="1"><SPAN id=code0156 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.codeExample("table('myTable').add({some row}).addRows([...]).sort()")</SPAN><SPAN id=out0156 class="OUTPUT SUCCESS"><SPAN class=CODEEXAMPLE>table('myTable').add({some row}).addRows([...]).sort()</SPAN></SPAN> 
<P></P></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0095 class="SECTION ELEMENT" sizset="69" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.4 Table</H2>
<DIV sizset="69" sizcache="1" container="sectionContent"><PRE id=code0101 class="CODE ELEMENT EDITABLE" contentEditable=false><P>table('myTable')</P><P>.add({_id:'zero',col1:1,col2:2,col3:3})</P><P>.add({_id:'one' ,col1:10,col2:20,col3:30})</P><P>.add({_id:'two' ,col1:100,col2:200,col3:300})</P></PRE>
<DIV id=out0101 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0103 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>now <STRONG>myTable</STRONG> is created in the same name space as the variables created with&nbsp;<STRONG>v</STRONG>()&nbsp; which is located in <STRONG>jc.vars</STRONG></DIV><PRE id=code0104 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect(tb.vars)</PRE>
<DIV id=out0104 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>myVariable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;tb.Var(myVariable):its&nbsp;value]</TD></TR>
<TR>
<TH vAlign=top>myJavaScriptVariable1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>5</TD></TR>
<TR>
<TH vAlign=top>myJavaScriptVariable2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;JQuery]&nbsp;length:1</TD></TR>
<TR>
<TH vAlign=top>currentPrice$USD</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;tb.Var(currentPrice$USD):1234]</TD></TR>
<TR>
<TH vAlign=top>aTable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>myTable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(myTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0112 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>a Table object is an array like, so each row can be found using [x]</DIV><PRE id=code0113 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable[2]</PRE>
<DIV id=out0113 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0114 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>every row is an object so the column can be found using either [] or the dot notation</DIV><PRE id=code0115 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable[2]</PRE>
<DIV id=out0115 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV><PRE id=code0116 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable[2]._['col3']</PRE>
<DIV id=out0116 class="OUTPUT SUCCESS">300</DIV><PRE id=code0220 class="CODE ELEMENT EDITABLE" contentEditable=false><P>// exactly the same as above:</P><P>myTable[2]._.col3</P></PRE>
<DIV id=out0220 class="OUTPUT SUCCESS">300</DIV><PRE id=code0221 class="CODE ELEMENT EDITABLE" contentEditable=false><P>// or another method</P><P>myTable.cell(2,'col3')</P></PRE>
<DIV id=out0221 class="OUTPUT SUCCESS">300</DIV>
<DIV id=sect0119 class="SECTION ELEMENT" sizset="76" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.4.1 span</H3>
<DIV sizset="76" sizcache="1" container="sectionContent">
<DIV id=rich0120 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="76" sizcache="1">
<P sizset="76" sizcache="1"><SPAN id=code0121 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.help(myTable.span)</SPAN><SPAN id=out0121 class="OUTPUT SUCCESS"><SPAN class=HELP><B>function()</B><BR>deprecated: only for backward compatibility: use node$ instead <BR></SPAN></SPAN>
<P></P></DIV><PRE id=code0123 class="CODE ELEMENT EDITABLE" contentEditable=false><P>myTable.span({cols:{_id:1,col1:1}});</P></PRE>
<DIV id=out0123 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV><PRE id=code0124 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable.span({cols:{col1:{head:1,className:'RIGHT'},col2:1}})</PRE>
<DIV id=out0124 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=rich0118 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false></DIV>
<DIV id=sect0126 class="SECTION ELEMENT" sizset="79" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.4.2 sort</H3>
<DIV sizset="79" sizcache="1" container="sectionContent">
<DIV id=rich0127 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="79" sizcache="1"><SPAN id=code0128 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">tb.help(myTable.sort)</SPAN><SPAN id=out0128 class="OUTPUT SUCCESS"><SPAN class=HELP><B>function(cols)</B><BR>sort the table according to the "<SPAN class=PARAMETER>cols</SPAN>" criteria <BR><SPAN class=PARAMETER>cols</SPAN> is an object of the form: <BR>{ col1: 1 // 1 means ascending alphabetic or numeric order <BR>col2:-1 //-1 means descending alphabetic or numeric order <BR>col3: function(a,b) {... // any function that compare a and b and returns &gt;0 if a&gt;b, &lt;0 if a<B, 0 if a="=b" <br> return the table for command chaining <BR></SPAN></SPAN></DIV><PRE id=code0129 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable.sort({_id:1})</PRE>
<DIV id=out0129 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR></TBODY></TABLE></DIV><PRE id=code0130 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable.sort({_id:-1})</PRE>
<DIV id=out0130 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0131 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>note that <STRONG>sort</STRONG> sorts in place the table, so the row number are different</P></DIV><PRE id=code0132 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable[1]</PRE>
<DIV id=out0132 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0133 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false></DIV><PRE id=code0134 class="CODE ELEMENT EDITABLE" contentEditable=false>myTable.view()</PRE>
<DIV id=out0134 class="OUTPUT SUCCESS">
<DIV><VAR>myTable</VAR>
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV id=sect0136 class="SECTION ELEMENT" sizset="84" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.4.3 addRows</H3>
<DIV sizset="84" sizcache="1" container="sectionContent"><PRE id=code0137 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.help(tb.Table.prototype.addRows)</PRE>
<DIV id=out0137 class="OUTPUT SUCCESS"><SPAN class=HELP><B>function(rows)</B><BR>add multiple <SPAN class=PARAMETER>rows</SPAN> <BR><SPAN class=PARAMETER>rows</SPAN> must be an array or array-like of objects <BR>columns are ajusted automatically <BR></SPAN></DIV><PRE id=code0138 class="CODE ELEMENT EDITABLE" contentEditable=false><P>myTable.addRows([</P><P>{_id:'four',col1:1000,col4:4000},</P><P>{_id:'five',col1:10000,col4:40000}]);</P></PRE>
<DIV id=out0138 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH>
<TH>col4</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">four</TD>
<TD>1000</TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD>4000</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">five</TD>
<TD>10000</TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD style="TEXT-ALIGN: left"><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD>40000</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=sect0225 class="SECTION ELEMENT" sizset="86" sizcache="1">
<H3 class="SECTIONTITLE EDITABLE" contentEditable=false>3.4.4 edit</H3>
<DIV sizset="86" sizcache="1" container="sectionContent"><PRE id=code0227 class="CODE AUTOEDIT ELEMENT EDITABLE" contentEditable=false jcObject="newTable">table("newTable")<BR>.add({"toto":127,"tutu":1452,"somme":f("toto+tutu")})<BR>.add({"toto":133,"tutu":145,"somme":f("toto+tutu")})<BR>.edit()</PRE>
<DIV id=out0227 class="OUTPUT SUCCESS">
<DIV><VAR>newTable</VAR>
<TABLE>
<TBODY>
<TR>
<TH>#</TH>
<TH>toto</TH>
<TH>tutu</TH>
<TH>somme</TH></TR>
<TR>
<TH draggable="true">0</TH>
<TD><INPUT class="EDITOR number" value=127 jcObject="newTable" jcCol="toto" jcRow="0"></TD>
<TD><INPUT class="EDITOR number" value=1452 jcObject="newTable" jcCol="tutu" jcRow="0"></TD>
<TD><INPUT class="EDITOR function RIGHT" value=1579 jcObject="newTable" jcCol="somme" jcRow="0"></TD></TR>
<TR>
<TH draggable="true">1</TH>
<TD><INPUT class="EDITOR number" value=133 jcObject="newTable" jcCol="toto" jcRow="1"></TD>
<TD><INPUT class="EDITOR number" value=145 jcObject="newTable" jcCol="tutu" jcRow="1"></TD>
<TD><INPUT class="EDITOR function RIGHT" value=278 jcObject="newTable" jcCol="somme" jcRow="1"></TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV>
<DIV id=rich0136 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>You can always inspect a class prototype to have information on the different methods</P></DIV><PRE id=code0122 class="CODE ELEMENT EDITABLE" contentEditable=false>tb.inspect(tb.Table.prototype)</PRE>
<DIV id=out0122 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>set</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(value /*,path*/)</B><BR>set the <SPAN class=PARAMETER>value</SPAN> of the property of this.path1.path2... and creates, if needed the intermediate objects <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>get</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(/*path*/)</B><BR>applied as a method (either declare MyClass.prototype.get = tb.get or tb.get.call(obj,path) <BR>returns this.path1.path2.path3 or undefined if at any stage it becomes undefined <BR>and search also in this.parent is case of undefined property <BR>enables a cascad search of a property <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rename</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(name)</B><BR>if <SPAN class=PARAMETER>name</SPAN> is undefined return the <SPAN class=PARAMETER>name</SPAN> <BR>otherwise set a new <SPAN class=PARAMETER>name</SPAN> and return this <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>registerPk</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>primaryKey</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(pkCol)</B><BR>set the primary key colName <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>defCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(name, defValue, style)</B><BR>set the column attribute <BR><BR><SPAN class=PARAMETER>defValue</SPAN> is the value that is used when a new Row is added and that column is not defined <BR>it can be a JavaScript value (number, object.. or an f(jcFunc) <BR>the style if set will call colStyle <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>updateCols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(withRow)</B><BR>updates the cols description with the fields found in <SPAN class=PARAMETER>withRow</SPAN> <BR>normally for internal use only <BR>return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>colOrder</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(order)</B><BR>if <SPAN class=PARAMETER>order</SPAN> = array of colName: set a new <SPAN class=PARAMETER>order</SPAN> <BR>if <SPAN class=PARAMETER>order</SPAN> == undefined return the current <SPAN class=PARAMETER>order</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>show</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns,visible)</B><BR>show all <SPAN class=PARAMETER>columns</SPAN> specified in the <SPAN class=PARAMETER>columns</SPAN> array <BR>if <SPAN class=PARAMETER>visible</SPAN> = true or undefined, ensure this <SPAN class=PARAMETER>columns</SPAN> are <SPAN class=PARAMETER>visible</SPAN> if it exist <BR>if <SPAN class=PARAMETER>visible</SPAN> = false, ensure this <SPAN class=PARAMETER>columns</SPAN> are hidden <BR>if <SPAN class=PARAMETER>visible</SPAN> = null, reset to the default (specialy for View) <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>hide</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>showOnly</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(columns)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>add</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row)</B><BR>add a <SPAN class=PARAMETER>row</SPAN> <BR><SPAN class=PARAMETER>row</SPAN> can be either a simple object or a Row object <BR>return the table for method chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>addRows</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(rows)</B><BR>add multiple <SPAN class=PARAMETER>rows</SPAN> <BR><SPAN class=PARAMETER>rows</SPAN> must be an array or array-like of objects <BR>columns are ajusted automatically <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>update</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(cols,keepOnlyValue)</B><BR><SPAN class=PARAMETER>cols</SPAN> is an object {colName:value,....} <BR>value can be a simple value like a number or a string, <BR>but can also be a jcFunc produced by f(jcFunc) <BR>that will either be stored in the table <BR>or be used during the update to calculate the static value of the cell <BR>if <SPAN class=PARAMETER>keepOnlyValue</SPAN> == true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>forEachRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(func)</B><BR>execute <SPAN class=PARAMETER>func</SPAN> for each row of the table <BR><SPAN class=PARAMETER>func</SPAN> must be function(i,row) in which this represents the Row object <BR>return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col)</B><BR>return the content of the cell: if the cell is a function: return the function <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>val</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col)</B><BR>return the VALUE of the cell: if a function, this function is calculated first <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>reduce</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,reduceF,criteria,initialValue)</B><BR>apply a reduce function on a column <BR><SPAN class=PARAMETER>criteria</SPAN> is an optional f(jcFunc) that process only row that return true <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sum</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the sum of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>min</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the min of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>max</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the min of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>average</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the average of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rms</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(colName,criteria)</B><BR>return the root mean square of the column <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,col,value)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>lookup</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return the data of the first row matching the <SPAN class=PARAMETER>criteria</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>tableStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>colStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style,colName)</B><BR>set the <SPAN class=PARAMETER>style</SPAN> for a column <BR><SPAN class=PARAMETER>style</SPAN> can be either an object of $.css() parameters <BR>or a function(data,col,value) where this represents the row object which is compatible with f("jcFunc") <BR>and which return an object of css parameters <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>rowStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(style,rowNumber)</B><BR>set the <SPAN class=PARAMETER>style</SPAN> for a row <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>style</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(newStyle,rowNumber,colName)</B><BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>)
<DD>will set the default <SPAN class=PARAMETER>newStyle</SPAN> for the complete table <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,rowNumber)
<DD>will set the default style for a given row <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,undefined,<SPAN class=PARAMETER>colName</SPAN>)
<DD>will set the default style for a column <BR>
<DT>.style(<SPAN class=PARAMETER>newStyle</SPAN>,rowNumber,<SPAN class=PARAMETER>colName</SPAN>)
<DD>will set the style for a given cell <BR><SPAN class=PARAMETER>newStyle</SPAN> can either be an object {cssAttr=val,...} or a function(table,<SPAN class=PARAMETER>rowNumber</SPAN>,colName) <BR></SPAN></DD></TD></TR>
<TR>
<TH vAlign=top>compoundStyle</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(row,colName,value)</B><BR>calculate the compound style for a given cell <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>sort</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(cols)</B><BR>sort the table according to the "<SPAN class=PARAMETER>cols</SPAN>" criteria <BR><SPAN class=PARAMETER>cols</SPAN> is an object of the form: <BR>{ col1: 1 // 1 means ascending alphabetic or numeric order <BR>col2:-1 //-1 means descending alphabetic or numeric order <BR>col3: function(a,b) {... // any function that compare a and b and returns &gt;0 if a&gt;b, &lt;0 if a<B, 0 if a="=b" <br> return the table for command chaining <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>find</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>return a new view of this table that has only the rows that match the <SPAN class=PARAMETER>criteria</SPAN> <BR>the rows of this view ARE THE ORIGINAL ROWS <BR>any function in a cell still refer to the original table. <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>findFirst</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(criteria)</B><BR>mongoDB find() as if the table was a small mongoDB <BR>return the first Row of this table that match the <SPAN class=PARAMETER>criteria</SPAN> <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>return a string summarizing the table <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>node$</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>display the table without its name <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>deprecated: only for backward compatibility: use node$ instead <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>display the table, including its name in a 
<DIV><BR></SPAN></DIV></TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(options)</B><BR>edit is similar to span, but gernerates HTML code in order to edit the object interactively <BR>it will also set the code to AUTOEDIT class which means that it should no longer be modified by the user since it will <BR>be generated by the edition mecanism. <BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function(editor)</B><BR></SPAN></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=HELP><B>function()</B><BR>generate the code that represents the element as edited <BR>can be used to replace the existing code <BR></SPAN></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0117 class="CODE ELEMENT EDITABLE" contentEditable=false></PRE>
<DIV id=out0117 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">undefined</SPAN></DIV></DIV></DIV>
<DIV id=sect0209 class="SECTION ELEMENT" sizset="89" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.5 output</H2>
<DIV sizset="89" sizcache="1" container="sectionContent">
<DIV id=rich0210 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>so far all output where just the result of the last statment displayed by the EDI in a proper format. Sometimes you want to better control the output of your code Element.</P>
<P>For every code Element an output object is created. this output object is an HTML object with 2 extra properties: codeElement and outputElement that points to the code DOM Element and the output DOM Element.</P>
<P>&nbsp;</P>
<P>You can use <STRONG>output</STRONG> to build step by step the result of your code like in the following example</P></DIV><PRE id=code0211 class="CODE ELEMENT EDITABLE" contentEditable=false><P>for (var i = 0; i&lt;10;i++) {</P><P>  output.p('the square of '+i+' is '+i*i);</P><P>}</P></PRE>
<DIV id=out0211 class="OUTPUT SUCCESS">
<P>the square of 0 is 0</P>
<P>the square of 1 is 1</P>
<P>the square of 2 is 4</P>
<P>the square of 3 is 9</P>
<P>the square of 4 is 16</P>
<P>the square of 5 is 25</P>
<P>the square of 6 is 36</P>
<P>the square of 7 is 49</P>
<P>the square of 8 is 64</P>
<P>the square of 9 is 81</P></DIV></DIV></DIV>
<DIV id=sect0158 class="SECTION ELEMENT" sizset="90" sizcache="1">
<H2 class="SECTIONTITLE EDITABLE" contentEditable=false>3.6 function delaration</H2>
<DIV sizset="90" sizcache="1" container="sectionContent">
<DIV id=rich0159 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false sizset="90" sizcache="1">
<P>such a spreadsheet would be of no use if we can not make calculation.</P>
<P>&nbsp;</P>
<P sizset="90" sizcache="1">As we already have declared <SPAN id=code0161 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">currentPrice$USD.view()</SPAN><SPAN id=out0161 class="OUTPUT SUCCESS"><VAR>currentPrice</VAR> = <SPAN class=VALUE>1234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></SPAN></P>we can now define the following <SPAN id=code0162 class="CODE EMBEDDED ELEMENT" style="DISPLAY: none">v('costOfGood$USD',1000).view()</SPAN><SPAN id=out0162 class="OUTPUT SUCCESS"><VAR>costOfGood</VAR> = <SPAN class=VALUE>1000</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></SPAN> 
<P></P>so now we can calculate the margin as a formula</DIV><PRE id=code0160 class="CODE ELEMENT EDITABLE" contentEditable=false>v('margin$USD',f('currentPrice$USD-costOfGood$USD')).view()</PRE>
<DIV id=out0160 class="OUTPUT SUCCESS"><VAR>margin</VAR> = <SPAN class=VALUE>234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV>
<DIV id=rich0163 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>let explain a little bit of the magic of <STRONG>f()</STRONG></P>
<P>f takes a string parameter that will become the body of the function</P><PRE>function (row,col) {</PRE><PRE>  with (jc.vars) {</PRE><PRE>    with (row || {}) {</PRE><PRE>      <EM>return </EM>// your body will be here</PRE><PRE>    }</PRE><PRE>  }</PRE><PRE>}</PRE>
<P>let puts aside for a while (row,col). as we are inside a with(jc.vars), we have direct access to all previously defined variables.</P>
<P>This function will be stored inside <STRONG>margin$USD</STRONG> so any attempt to get its value will first recalculate the function. </P>
<P>Please note that <STRONG>return</STRONG> is automatically added at the beginning of your body if no return is found inside the body</P>
<P>&nbsp;</P>
<P>please note the you also could have written your own anonymous function like below:</P></DIV><PRE id=code0166 class="CODE ELEMENT EDITABLE" contentEditable=false><P>v('vendorCommission$USD',function(){return tb.vars.currentPrice$USD*0.1}).view();</P></PRE>
<DIV id=out0166 class="OUTPUT SUCCESS"><VAR>vendorCommission</VAR> = <SPAN class=VALUE>123.4</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV>
<DIV id=rich0167 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>
<P>as we have seen above the function is created with row, col parameters.</P>
<P>This is of use if the function is used inside a table.</P>
<P>Please note the explicit usage of .style in order to set another format for the numbers</P></DIV><PRE id=code0168 class="CODE ELEMENT EDITABLE" contentEditable=false><P>table('myTable2').addRows([</P><P>{article:'apple',costOfGood$USD:1,margin$USD:0.5,listPrice$USD:f('costOfGood$USD+margin$USD')},</P><P>{article:'orange',costOfGood$USD:2,margin$USD:0.75,listPrice$USD:f('costOfGood$USD+margin$USD')},</P><P>{article:'pineApple',costOfGood$USD:5,margin$USD:1.5,listPrice$USD:f('costOfGood$USD+margin$USD')}])</P><P>.style({format:tb.fixed(2)})</P></PRE>
<DIV id=out0168 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>article</TH>
<TH>costOfGood$USD</TH>
<TH>margin$USD</TH>
<TH>listPrice$USD</TH></TR></THEAD>
<TBODY>
<TR>
<TD style="TEXT-ALIGN: left">apple</TD>
<TD style=>1.00</TD>
<TD style=>0.50</TD>
<TD style=>1.50</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">orange</TD>
<TD style=>2.00</TD>
<TD style=>0.75</TD>
<TD style=>2.75</TD></TR>
<TR>
<TD style="TEXT-ALIGN: left">pineApple</TD>
<TD style=>5.00</TD>
<TD style=>1.50</TD>
<TD style=>6.50</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0169 class="RICHTEXT ELEMENT EDITABLE" contentEditable=false>Please note that the identificators are first found in the row and only search in&nbsp;jc.vars if not found in the row. so costOfGood$USD and margin$USD refers to the row, not the global variable previously defined. Of course you can still access those variable with <STRONG>v.costOfGood$USD</STRONG></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0047 class="SECTION ELEMENT">
<H1 class="SECTIONTITLE EDITABLE" contentEditable=false>4 known issue:</H1>
<DIV container="sectionContent">
<DIV class="ELEMENT EMPTY" contentEditable=false>empty container: click here to add an element</DIV></DIV></DIV><PRE id=code0245 class="ELEMENT CODE EDITABLE" contentEditable=false><P>tb.updateResultsTestStatus();</P><P>tb.inspect(tb.results,'',2);</P><P>if ('runonce' in tb.url.arguments) window.close();</P></PRE>
<DIV id=out0245 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} 2</LEGEND>
<TABLE>
<TBODY>
<TR>
<TH vAlign=top>testStatus</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></BODY></HTML>