<HTML xmlns="http://www.w3.org/1999/xhtml" APPLICATIONNAME="D:\Documents\programmation\jcalc\jcalcV0\jcalc_documentation.hta" sizcache="1" sizset="0" xmlns:svg = "http://www.w3.org/2000/svg" XMLNS:HTA><HEAD><HTA:APPLICATION APPLICATIONNAME="JCalc:General documentation" SINGLEINSTANCE="yes" SCROLL="yes"></HTA:APPLICATION><LINK rel=stylesheet type=text/css href="jcalc.css" src="jcalc.css">
<SCRIPT src="jquery-1.5.1.min.js"></SCRIPT>

<SCRIPT src="jcalcEdi.js"></SCRIPT>

<SCRIPT src="units.js"></SCRIPT>

<SCRIPT src="jcalc.js"></SCRIPT>

<SCRIPT src="axe.js"></SCRIPT>

<SCRIPT src="stateMachine.js"></SCRIPT>

<SCRIPT src="BOM.js"></SCRIPT>

<SCRIPT src="sys.js"></SCRIPT>

<SCRIPT src="ocrRdy.js"></SCRIPT>

<SCRIPT src="finance.js"></SCRIPT>
</HEAD>
<BODY sizcache="1" sizset="0" hideTrace="true" hideTest="true" designMode="on">
<DIV id=menu class=TOOLBAR style="OVERFLOW: hidden; HEIGHT: 45px; WIDTH: 1383px; ZOOM: 1; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; FILTER:  alpha(opacity=100); MARGIN: 0px; PADDING-RIGHT: 0px" >
<DIV><INPUT onclick=jc.hideCode(event) type=checkbox>hide codes</INPUT><INPUT onclick=jc.hideCut(event) type=checkbox>hide Cut</INPUT><INPUT onclick=jc.hideTest(event) type=checkbox>hide tests</INPUT><INPUT onclick=jc.hideTrace(event) type=checkbox>hide traces</INPUT><INPUT onclick=jc.autoRun(event) CHECKED type=checkbox>auto run</INPUT><BUTTON onclick=jc.selectElement(undefined);>hide ToolBars</BUTTON><BUTTON onclick=jc.print();>print...</BUTTON></DIV>
<DIV><SPAN><BUTTON onclick=jc.execUntilSelected(); id=runUntilSelectedBtn style="COLOR: #8dff60">&#9658;|</BUTTON><BUTTON onclick=jc.execAll(); id=runAllBtn style="COLOR: #8dff60">&#9658;&#9658;</BUTTON><BUTTON onclick=jc.clearTimers(); id=stopAnimation style="COLOR: red">&#9632;</BUTTON><BUTTON onclick=jc.save(); id=saveBtn class=WARNING >save</BUTTON><SPAN id=codeId>no selection</SPAN><BUTTON onclick=jc.showOutputHtml(this);>show html</BUTTON><BUTTON onclick=jc.copyOutputToTest(this);>&#8594;test</BUTTON><BUTTON onclick=jc.cutBlock(jc.selectedElement);>&#8595; cut &#8595;</BUTTON></SPAN><SPAN id=objectToolBar><SPAN id=richTextToolBar class=TOOLBAR><BUTTON onclick=jc.richedit.bold(); ><B>B</B></BUTTON><BUTTON onclick=jc.richedit.italic(); ><I>i</I></BUTTON><BUTTON onclick=jc.richedit.underline();><U>U</U></BUTTON><BUTTON onclick=jc.richedit.strike();><STRIKE>S</STRIKE></BUTTON><BUTTON onclick=jc.richedit.h1();><B>H1</B></BUTTON><BUTTON onclick=jc.richedit.h2();><B>H2</B></BUTTON><BUTTON onclick=jc.richedit.div();>div</BUTTON><BUTTON onclick=jc.richedit.p();>¶</BUTTON><BUTTON onclick=jc.richedit.ol();>#</BUTTON><BUTTON onclick=jc.richedit.ul();>&#8226;</BUTTON><BUTTON onclick=jc.richedit.pre();>{}</BUTTON></SPAN></SPAN></DIV></DIV>
<DIV id=jcContent style="OVERFLOW: scroll; BORDER-TOP: medium none; HEIGHT: 650px; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none" sizcache="1" sizset="0"><PRE id=code0170 class=CODE contentEditable=false>jc.credits</PRE>
<DIV id=out0170 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>JCalc</TD></TR>
<TR>
<TH vAlign=top>version</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>0.1</TD></TR>
<TR>
<TH vAlign=top>authors</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Marc&nbsp;Nicole</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=sect0003 class=SECTION>
<H1 class=SECTIONTITLE contentEditable=false>1 table of content</H1>
<DIV class=SECTIONCONTAINER></DIV></DIV><PRE id=code0002 class=CODE contentEditable=false>jc.tableOfContent</PRE>
<DIV id=out0002 class="OUTPUT SUCCESS">
<DIV class=TOC0>1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0003">table of content</A></DIV>
<DIV class=TOC0>2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0004">Introduction</A></DIV>
<DIV class=TOC1>2.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0006">What is JCalc?</A></DIV>
<DIV class=TOC1>2.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0007">Fundamentals of JCalc</A></DIV>
<DIV class=TOC1>2.3 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0005">What is not JCalc</A></DIV>
<DIV class=TOC1>2.4 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0015">Basic block of JCalc</A></DIV>
<DIV class=TOC2>2.4.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0018">Section</A></DIV>
<DIV class=TOC2>2.4.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0020">Rich Text</A></DIV>
<DIV class=TOC3>2.4.2.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0045">code reformating {{&nbsp;}}</A></DIV>
<DIV class=TOC2>2.4.3 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0022">code</A></DIV>
<DIV class=TOC1>2.5 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0069">Code Execution </A></DIV>
<DIV class=TOC2>2.5.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0213">Run Until Selected button or ctrl-Enter</A></DIV>
<DIV class=TOC2>2.5.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0215">Run All and auto run</A></DIV>
<DIV class=TOC0>3 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0070">the JCalc library</A></DIV>
<DIV class=TOC1>3.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0076">Variable declaration</A></DIV>
<DIV class=TOC2>3.1.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0107">Naming conventions</A></DIV>
<DIV class=TOC2>3.1.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0085">Unit support</A></DIV>
<DIV class=TOC1>3.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0173">view the result</A></DIV>
<DIV class=TOC2>3.2.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0186">jc.inspect</A></DIV>
<DIV class=TOC2>3.2.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0202">jc.help</A></DIV>
<DIV class=TOC1>3.3 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0143">General methods</A></DIV>
<DIV class=TOC2>3.3.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0145">toString</A></DIV>
<DIV class=TOC2>3.3.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0152">valueOf</A></DIV>
<DIV class=TOC2>3.3.3 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0148">span</A></DIV>
<DIV class=TOC2>3.3.4 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0150">view</A></DIV>
<DIV class=TOC2>3.3.5 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0154">method chaining</A></DIV>
<DIV class=TOC1>3.4 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0095">Table</A></DIV>
<DIV class=TOC2>3.4.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0119">span</A></DIV>
<DIV class=TOC2>3.4.2 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0126">sort</A></DIV>
<DIV class=TOC3>3.4.2.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0136">addRows</A></DIV>
<DIV class=TOC1>3.5 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0209">output</A></DIV>
<DIV class=TOC1>3.6 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0158">function delaration</A></DIV>
<DIV class=TOC0>4 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0047">known issue:</A></DIV>
<DIV class=TOC1>4.1 <A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0050">cut &amp; paste of text having code</A></DIV></DIV>
<DIV id=sect0004 class=SECTION sizcache="1" sizset="3">
<H1 class=SECTIONTITLE contentEditable=false>2 Introduction</H1>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="3">
<DIV id=sect0006 class=SECTION sizcache="1" sizset="3">
<H2 class=SECTIONTITLE contentEditable=false>2.1 What is <SPAN id=code0008 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0008 class="OUTPUT SUCCESS">JCalc</SPAN>?</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="3">
<DIV id=rich0004 class=RICHTEXT contentEditable=false sizcache="1" sizset="3">
<P>A bit of Word, a bit of wikipedia, a bit of Excel and a bit of python "notebook".</P>
<P sizcache="1" sizset="3"><SPAN id=code0009 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0009 class="OUTPUT SUCCESS">JCalc</SPAN> is born out a frustration: if you want to do a descent report for a scientific publication or a business plan, or any document that mixes both text and some calculation (in fact almost anything that is not poetry), you eventually come to a big dilema: should I use Word our should I use Excel? of course Word because I need quite a lot of explanation and of course Ecel because I use quite a bit of calculation. At the end, you cut and paste excel tables in Word. So far so good (in fact already some pain, but ok, worth the pain). But then the good news is someone read your work! Here is the bad news: someone read your work, find it very interresting and "just" point out: "what about if &#8364; / $ is 10% higher?" Ouuups! of course, most probably you can change some cells in Excel and it will do the maths... and then you cut &amp; paste again in Word, re-read all the text to see where you included some figure that now are no longer valid and and and... you fear the next question since you realize this job is very time consuming.</P>
<P>&nbsp;</P>
<P>The second frustration comes from Excel itself: as long as you do some simple calculation, this is extreamly efficient. but as soon as you start to do some complex work, this becomes extremely frustrating since complex equations with meaningless cells name like A3+C5+D2/2 are almost impossible to maintain.</P>
<P>As well as surprisingly, all situation where you have a certain number of tables of data: it become very complicated since the presentation of data enter in conflict with the maintnability of the sheet. Excel has some good functions but most people don't know them because it becomes extremly difficult to manage.</P>
<P>&nbsp;</P>
<P>I past position I faced many time this dilemna and dreamed of something better, or at least different. At that time I was impressed by wikipedia, that has some very specific macro mecanisme that helps to do some job, but could not replace Excel and python Notebook that is excellent to do complex maths, but has almost no capability to edit text. and notebook is relativelly complex to install, so not for anyone.</P>
<P>&nbsp;</P>
<P>Of course had no time to make this dream come true, but as life is a continuous surprise, all of a sudden I had too much time... this was&nbsp;<STRONG>the</STRONG> occasion to make this dream come true</P></DIV></DIV></DIV>
<DIV id=sect0007 class=SECTION sizcache="0" sizset="4">
<H2 class=SECTIONTITLE contentEditable=false>2.2 Fundamentals of <SPAN id=code0010 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0010 class="OUTPUT SUCCESS">JCalc</SPAN></H2>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0008 class=RICHTEXT contentEditable=false>
<P>The fundamentals are</P>
<UL>
<LI>Web based: browser based, so&nbsp;decently OS independent, very strong ecosystem. No fat client (in fact the fat is included in the browser) 
<LI>all maths are JavaScript and al least on the beginning only on the client side. JavaScript is very well supported, so no short term risk of obsolessence and even if I personnally find python more elegant than JavaScript, JavaScript deserves to be considered as a very powerfull language, and of course it has plenty of open source libraries to be used inside Jcalc. <STRONG>no special language</STRONG> just plain Java-Script 
<LI>simple file based system for the beginning. In the future some work will be done in servers. 
<LI>A system that can mix text and calculation in a very fluid manner</LI></UL>
<P>&nbsp;</P></DIV></DIV></DIV>
<DIV id=sect0005 class=SECTION sizcache="1" sizset="6">
<H2 class=SECTIONTITLE contentEditable=false>2.3 What is not <SPAN id=code0011 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0011 class="OUTPUT SUCCESS">JCalc</SPAN></H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="6">
<DIV id=rich0006 class=RICHTEXT contentEditable=false sizcache="1" sizset="6"><SPAN id=code0012 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0012 class="OUTPUT SUCCESS">JCalc</SPAN> is not Excel compatible, nor Word compatible etc... You suffer in one of this software... well you will probably continue to suffer for a while to tweek macros as long as you do not have the courage to jump to <SPAN id=code0013 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0013 class="OUTPUT SUCCESS">JCalc</SPAN></DIV></DIV></DIV>
<DIV id=sect0015 class=SECTION sizcache="1" sizset="9">
<H2 class=SECTIONTITLE contentEditable=false>2.4 Basic block of <SPAN id=code0017 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0017 class="OUTPUT SUCCESS">JCalc</SPAN></H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="9">
<DIV id=rich0016 class=RICHTEXT contentEditable=false sizcache="1" sizset="9">
<P sizcache="1" sizset="9">A <SPAN id=code0019 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0019 class="OUTPUT SUCCESS">JCalc</SPAN> document is composed of some basic block</P>
<P>&nbsp;</P></DIV>
<DIV id=sect0018 class=SECTION sizcache="1" sizset="10">
<H3 class=SECTIONTITLE contentEditable=false>2.4.1 Section</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="10">
<DIV id=rich0023 class=RICHTEXT contentEditable=false sizcache="1" sizset="10">
<P>A section is a container that structures the text in chapter, sub chapter etc... </P>
<P sizcache="1" sizset="10">Sections will be automatically numbered and taken into account in the <SPAN id=code0021 class="CODE EMBEDDED" style="DISPLAY: none">jc.link("table of content")</SPAN><SPAN id=out0021 class="OUTPUT SUCCESS"><A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0003">table of content</A></SPAN> that links can be made&nbsp;<SPAN id=code0035 class="CODE EMBEDDED" style="DISPLAY: none">jc.link("jc.link")</SPAN><SPAN id=out0035 class="OUTPUT SUCCESS" contentEditable=false><SPAN title="#jc.link is not found in the table of content" class=INVALIDLINK>jc.link</SPAN></SPAN>&nbsp;</P>
<P>A section is a title and a container of other blocks.</P>
<P>Identation is managed automatically.</P></DIV></DIV></DIV>
<DIV id=sect0020 class=SECTION sizcache="1" sizset="13">
<H3 class=SECTIONTITLE contentEditable=false>2.4.2 Rich Text</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="13">
<DIV id=rich0022 class=RICHTEXT contentEditable=false>
<P>A Rich Text element consists of a simple HTML editor.</P></DIV>
<DIV id=sect0045 class=SECTION sizcache="1" sizset="13">
<H4 class=SECTIONTITLE contentEditable=false>2.4.2.1 code reformating <SPAN id=code0054 class="CODE EMBEDDED" style="DISPLAY: none">'\{\{ \}\}'</SPAN><SPAN id=out0054 class="OUTPUT SUCCESS" contentEditable=false>{{&nbsp;}}</SPAN></H4>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="13">
<DIV id=rich0046 class=RICHTEXT contentEditable=false sizcache="1" sizset="13">Inside Rich Text, code can be inserted by using the <SPAN id=code0026 class="CODE EMBEDDED" style="DISPLAY: none">'\{\{...\}\}'</SPAN><SPAN id=out0026 class="OUTPUT SUCCESS" contentEditable=false>{{...}}</SPAN>&nbsp;syntaxe. for example, writing <SPAN id=code0028 class="CODE EMBEDDED" style="DISPLAY: none">'\{\{3+5\}\}'</SPAN><SPAN id=out0028 class="OUTPUT SUCCESS" contentEditable=false>{{3+5}}</SPAN> will transform into a code block having <STRONG><EM>3+5</EM></STRONG>&nbsp;as code and an output block like this <SPAN id=code0029 class="CODE EMBEDDED" style="DISPLAY: none">3+5</SPAN><SPAN id=out0029 class="OUTPUT SUCCESS" contentEditable=false>8</SPAN>&nbsp;(&lt;-- just click here to edit and understand how this works) 
<P>&nbsp;</P>
<P sizcache="1" sizset="16">when you click on a rich text block, one will see all <SPAN id=code0044 class="CODE EMBEDDED" style="DISPLAY: none">jc.link('code')</SPAN><SPAN id=out0044 class="OUTPUT SUCCESS" contentEditable=false><A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0022">code</A></SPAN> </P></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0022 class=SECTION sizcache="1" sizset="17">
<H3 class=SECTIONTITLE contentEditable=false>2.4.3 code</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="17">
<DIV id=rich0063 class=RICHTEXT contentEditable=false>
<P>A code section is very similar to the one that is created within Rich Text but consist of one block in itself</P>
<P>usually, this is intended for either a bunch of variable declaration, calculation and other, while within Rich Text this is more "showing the result of some already calculated variables".</P>
<P>&nbsp;</P>
<P>code is followed by an output division and has an optional test element below a complete example</P></DIV><PRE id=code0064 class=CODE contentEditable=false>10+12</PRE>
<DIV id=out0064 class="OUTPUT SUCCESS">22</DIV>
<DIV id=test0064 class="TEST HIDDEN SUCCESS">22</DIV>
<DIV id=rich0065 class=RICHTEXT contentEditable=false sizcache="1" sizset="18">The <SPAN id=code0068 class="CODE EMBEDDED" style="DISPLAY: none">jc.html('&lt;span class=CODEEXAMPLE&gt;code&lt;/span&gt;')</SPAN><SPAN id=out0068 class="OUTPUT SUCCESS" contentEditable=false><SPAN class=CODEEXAMPLE>code</SPAN></SPAN> is followed by an <SPAN id=code0073 class="CODE EMBEDDED" style="DISPLAY: none">jc.html('&lt;span class="OUTPUTEXAMPLE SUCCESS"&gt;output&lt;/span&gt;')</SPAN><SPAN id=out0073 class="OUTPUT SUCCESS" contentEditable=false><SPAN class="OUTPUTEXAMPLE SUCCESS">output</SPAN></SPAN> and followed by an optionnal&nbsp;<SPAN id=code0066 class="CODE EMBEDDED" style="DISPLAY: none">jc.html('&lt;span class=TESTEXAMPLE&gt;testElement&lt;/span&gt;')</SPAN><SPAN id=out0066 class="OUTPUT SUCCESS"><SPAN class=TESTEXAMPLE>testElement</SPAN></SPAN></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0069 class=SECTION sizcache="1" sizset="21">
<H2 class=SECTIONTITLE contentEditable=false>2.5 Code Execution </H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="21">
<DIV id=sect0213 class=SECTION sizcache="1" sizset="21">
<H3 class=SECTIONTITLE contentEditable=false>2.5.1 Run Until Selected button or ctrl-Enter</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="21">
<DIV id=rich0219 class=RICHTEXT contentEditable=false sizcache="1" sizset="21">
<P sizcache="1" sizset="21">While editing an element, you can either click on the "run until selected" <SPAN id=code0216 class="CODE EMBEDDED" style="DISPLAY: none">jc.html($('#runUntilSelectedBtn')[0].outerHTML)</SPAN><SPAN id=out0216 class="OUTPUT SUCCESS" contentEditable=false><BUTTON onclick=jc.execUntilSelected(); id=runUntilSelectedBtn style="COLOR: #8dff60">&#9658;|</BUTTON></SPAN> or press ctrl-Enter. Both will run all code element until (and including) the currently selected Element.</P>
<P>Please note that every run is done in a new fresh environnement, so every previously declared variable through v, table... are deleted before execution.</P></DIV></DIV></DIV>
<DIV id=sect0215 class=SECTION sizcache="1" sizset="22">
<H3 class=SECTIONTITLE contentEditable=false>2.5.2 Run All and auto run</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="22">
<DIV id=rich0217 class=RICHTEXT contentEditable=false sizcache="1" sizset="22">
<P>if the sheet is marked with auto run (by default) it will be executed fully on the openning of the sheet.</P>
<P sizcache="1" sizset="22">you can reexecute everything by pressing the run all button <SPAN id=code0218 class="CODE EMBEDDED" style="DISPLAY: none">jc.html($('#runAllBtn')[0].outerHTML)</SPAN><SPAN id=out0218 class="OUTPUT SUCCESS" contentEditable=false><BUTTON onclick=jc.execAll(); id=runAllBtn style="COLOR: #8dff60">&#9658;&#9658;</BUTTON></SPAN>. In both cases, the execution start by creating a fresh new variables environnement</P></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0070 class=SECTION sizcache="1" sizset="24">
<H1 class=SECTIONTITLE contentEditable=false>3 the <SPAN id=code0072 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0072 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> library</H1>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="24">
<DIV id=rich0071 class=RICHTEXT contentEditable=false></DIV>
<DIV id=sect0076 class=SECTION sizcache="1" sizset="24">
<H2 class=SECTIONTITLE contentEditable=false>3.1 Variable declaration</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="24">
<DIV id=rich0077 class=RICHTEXT contentEditable=false sizcache="1" sizset="24">
<P sizcache="1" sizset="24">the most uncommon part of <SPAN id=code0079 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0079 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> for already knowlegable JavaScript users is how to declare variables.</P>
<P>As all calculation will occure in the client, technically speaking, all should impact the JavaScript environnement, which is very impractical. if you would declare a variable "window" nothing would be reachable anymore since "window" is <STRONG>the</STRONG> root of many things in browser JavaScript.</P>
<P>&nbsp;</P>
<P>In order to avoid this problem, variables are declared using the v function like below</P></DIV><PRE id=code0078 class=CODE contentEditable=false>v('myVariable','its value')</PRE>
<DIV id=out0078 class="OUTPUT SUCCESS">its&nbsp;value</DIV>
<DIV id=rich0080 class=RICHTEXT contentEditable=false>
<P>by doing so <STRONG>myVariable</STRONG> is created. In fact, <STRONG>v.myVariable</STRONG> is created with an object of class <STRONG>V</STRONG> and is referenced in <STRONG>jc.vars</STRONG></P>
<P>Any code is executed inside a <EM><STRONG>with(jc.vars)</STRONG></EM> which means that <STRONG>myVariable</STRONG> is directly accessible</P>
<P>so the following code will retrieve what was stored</P></DIV><PRE id=code0081 class=CODE contentEditable=false>myVariable</PRE>
<DIV id=out0081 class="OUTPUT SUCCESS">its&nbsp;value</DIV>
<DIV id=rich0082 class=RICHTEXT contentEditable=false>As <STRONG>myVariable</STRONG> is a object of class <STRONG>V</STRONG> it has some methods like <STRONG>.view</STRONG></DIV><PRE id=code0083 class=CODE contentEditable=false>myVariable.view()</PRE>
<DIV id=out0083 class="OUTPUT SUCCESS"><VAR>myVariable</VAR> = <SPAN class=VALUE>its&nbsp;value</SPAN></DIV>
<DIV id=rich0084 class=RICHTEXT contentEditable=false>
<P>this shows the name of the variable as well as its current value</P>
<P>&nbsp;</P>
<P>another practical tool is</P><PRE>jc.inspect()</PRE>
<P>&nbsp;</P></DIV><PRE id=code0098 class=CODE contentEditable=false><P>jc.inspect(myVariable)</P></PRE>
<DIV id=out0098 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object V(myVariable):its value] </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>myVariable</TD></TR>
<TR>
<TH vAlign=top>label</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>myVariable</TD></TR>
<TR>
<TH vAlign=top>value</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>its&nbsp;value</TD></TR>
<TR>
<TH vAlign=top>func</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>undefined</TD></TR>
<TR>
<TH vAlign=top>type</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>string</TD></TR>
<TR>
<TH vAlign=top>setName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(name)</B><BR>&nbsp;for&nbsp;internal&nbsp;use&nbsp;only<BR>&nbsp;changes&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;variable&nbsp;and&nbsp;also<BR>&nbsp;updates&nbsp;.label&nbsp;and&nbsp;.unit</TD></TR>
<TR>
<TH vAlign=top>setValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>valueOf</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function ()</B><BR>&nbsp;return&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;variable<BR>&nbsp;if&nbsp;the&nbsp;variable&nbsp;is&nbsp;in&nbsp;fact&nbsp;a&nbsp;function,&nbsp;executes&nbsp;the&nbsp;function&nbsp;and&nbsp;return&nbsp;its&nbsp;value</TD></TR>
<TR>
<TH vAlign=top>toJson</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function ()</B><BR></TD></TR>
<TR>
<TH vAlign=top>code</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;return&nbsp;the&nbsp;code&nbsp;of&nbsp;the&nbsp;embedded&nbsp;function&nbsp;if&nbsp;such&nbsp;a&nbsp;function&nbsp;exists<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or&nbsp;undefined&nbsp;if&nbsp;not&nbsp;a&nbsp;function</TD></TR>
<TR>
<TH vAlign=top>to</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(unit)</B><BR>&nbsp;return&nbsp;the&nbsp;value&nbsp;converted&nbsp;to&nbsp;unit</TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;return&nbsp;the&nbsp;summary&nbsp;of&nbsp;the&nbsp;variable</TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>&nbsp;returns&nbsp;an&nbsp;HTML&nbsp;object&nbsp;with&nbsp;VariableName&nbsp;=&nbsp;value</TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;returns&nbsp;an&nbsp;HTML&nbsp;object&nbsp;with&nbsp;the&nbsp;necessary&nbsp;controls&nbsp;to&nbsp;edit&nbsp;the&nbsp;variable</TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;generate&nbsp;the&nbsp;code&nbsp;that&nbsp;represents&nbsp;the&nbsp;element&nbsp;as&nbsp;edited<BR>&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;replace&nbsp;the&nbsp;existing&nbsp;code&nbsp;</TD></TR>
<TR>
<TH vAlign=top>isV</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0099 class=RICHTEXT contentEditable=false sizcache="1" sizset="29">
<P sizcache="1" sizset="29">more will be detailled in <SPAN id=code0100 class="CODE EMBEDDED" style="DISPLAY: none">jc.link("jc.inspect")</SPAN><SPAN id=out0100 class="OUTPUT SUCCESS" contentEditable=false><A href="file:///D:/Documents/programmation/jcalc/jcalcV0/jcalc_documentation.hta#sect0186">jc.inspect</A></SPAN> but for now just take it as a good way to inspect anything and a way to get help on an object</P>
<P>&nbsp;</P>
<P>you can inspect anything, so you can also&nbsp;just type <STRONG>jc.vars</STRONG> to have a look of&nbsp;all declared variables.</P></DIV><PRE id=code0105 class=CODE contentEditable=false>jc.vars</PRE>
<DIV id=out0105 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>myVariable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;V(myVariable):its&nbsp;value]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0106 class=RICHTEXT contentEditable=false></DIV>
<DIV id=sect0107 class=SECTION sizcache="1" sizset="31">
<H3 class=SECTIONTITLE contentEditable=false>3.1.1 Naming conventions</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="31">
<DIV id=rich0108 class=RICHTEXT contentEditable=false sizcache="1" sizset="31">
<P sizcache="1" sizset="31">In <SPAN id=code0109 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0109 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> one should avoid starting a variable name by _ since those are reserved for the library usage (like _simulation).</P>
<P sizcache="1" sizset="32">If you do so, you will be sure that this name space is for you and no upgrade of <SPAN id=code0110 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0110 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> will interfear in your variables.</P>
<P>For the rest, it's up to you, but common good practice for JavaScript is to camelCase every word but the first and avoid underscore.</P>
<P>&nbsp;</P>
<P>the library follows those common conventions:</P>
<P>a function stating with a CapitalCase is a constructor (~ a Class)</P></DIV>
<DIV id=insideToolBar class=TOOLBAR><BUTTON onclick=jc.insertNewSection(this.parentNode);>&#8593; new section &#8593;</BUTTON><BUTTON onclick=jc.insertNewRichText(this.parentNode);>&#8593; new rich text &#8593;</BUTTON><BUTTON onclick=jc.insertNewCodeBlock(this.parentNode);>&#8593; new code &#8593;</BUTTON><BUTTON onclick=jc.paste(this.parentNode);>&#8593; paste &#8593;</BUTTON></DIV></DIV></DIV>
<DIV id=sect0085 class=SECTION sizcache="1" sizset="33">
<H3 class=SECTIONTITLE contentEditable=false>3.1.2 Unit support</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="33">
<DIV id=rich0086 class=RICHTEXT contentEditable=false sizcache="1" sizset="33">
<P sizcache="1" sizset="33">One on the very common programming mistake is to missmatch units, adding for example $ and &#8364; and of course having strange results. Unfortunally no modern language supports properly units (which is a shame). JavaScript is no exception :-( . So, even if this is far from perfect, some provision have been given in <SPAN id=code0088 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0088 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> while remaining pure JavaScript. </P>
<P>&nbsp;</P>
<P>By convention the unit is located in the variable name after a <STRONG>$</STRONG> sign</P></DIV><PRE id=code0087 class=CODE contentEditable=false>v('currentPrice$USD',1234).view()</PRE>
<DIV id=out0087 class="OUTPUT SUCCESS"><VAR>currentPrice</VAR> = <SPAN class=VALUE>1234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV><PRE id=code0089 class=CODE contentEditable=false>currentPrice$USD</PRE>
<DIV id=out0089 class="OUTPUT SUCCESS">1234</DIV><PRE id=code0090 class=CODE contentEditable=false>currentPrice$USD.unit</PRE>
<DIV id=out0090 class="OUTPUT SUCCESS">USD</DIV><PRE id=code0091 class=CODE contentEditable=false>currentPrice$USD.label</PRE>
<DIV id=out0091 class="OUTPUT SUCCESS">currentPrice</DIV>
<DIV id=rich0092 class=RICHTEXT contentEditable=false sizcache="1" sizset="38">
<P sizcache="1" sizset="38">In the future some capability of unit convertion will be given. nothing prevents you to write code like <SPAN id=code0093 class="CODE EMBEDDED" style="DISPLAY: none">jc.codeExample('currentPrice$USD-margin$EUR')</SPAN><SPAN id=out0093 class="OUTPUT SUCCESS"><SPAN class=CODEEXAMPLE>currentPrice$USD-margin$EUR</SPAN></SPAN></P>but at least this notation makes you a little bit more aware of the problem.</DIV></DIV></DIV>
<DIV id=insideToolBar class=TOOLBAR><BUTTON onclick=jc.insertNewSection(this.parentNode);>&#8593; new section &#8593;</BUTTON><BUTTON onclick=jc.insertNewRichText(this.parentNode);>&#8593; new rich text &#8593;</BUTTON><BUTTON onclick=jc.insertNewCodeBlock(this.parentNode);>&#8593; new code &#8593;</BUTTON><BUTTON onclick=jc.paste(this.parentNode);>&#8593; paste &#8593;</BUTTON></DIV></DIV></DIV>
<DIV id=sect0173 class=SECTION sizcache="1" sizset="39">
<H2 class=SECTIONTITLE contentEditable=false>3.2 view the result</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="39">
<DIV id=rich0174 class=RICHTEXT contentEditable=false>
<P>The simpliest method to view a result is just to execute a code that ends with some results like in a JavaScript console</P></DIV><PRE id=code0175 class=CODE contentEditable=false>2+3</PRE>
<DIV id=out0175 class="OUTPUT SUCCESS">5</DIV>
<DIV id=rich0176 class=RICHTEXT contentEditable=false sizcache="1" sizset="40">in <SPAN id=code0178 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0178 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN>, when a piece of code returns a result, it will first look if this is a simple type and display it in a human format</DIV><PRE id=code0177 class=CODE contentEditable=false>undefined</PRE>
<DIV id=out0177 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">undefined</SPAN></DIV><PRE id=code0179 class=CODE contentEditable=false>''</PRE>
<DIV id=out0179 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">empty string</SPAN></DIV>
<DIV id=rich0182 class=RICHTEXT contentEditable=false>note that this is close to the toString(), so an array will show like a list.</DIV><PRE id=code0180 class=CODE contentEditable=false>[1,2,3]</PRE>
<DIV id=out0180 class="OUTPUT SUCCESS">1,2,3</DIV>
<DIV id=rich0183 class=RICHTEXT contentEditable=false sizcache="1" sizset="44">then if this is an object, it will try to use the <STRONG>span()</STRONG> method to get an decent html representation of the object. This works well on the <SPAN id=code0184 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0184 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> library that consitently implement this method</DIV><PRE id=code0185 class=CODE contentEditable=false><P>table('aTable')</P><P>.add({id:'zero',col1:1,col2:2,col3:3})</P><P>.add({id:'one' ,col1:10,col2:20,col3:30})</P><P>.add({id:'two' ,col1:100,col2:200,col3:300})</P></PRE>
<DIV id=out0185 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TD>zero</TD>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TD>one</TD>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TD>two</TD>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV><PRE id=code0197 class=CODE contentEditable=false><P>function sum(a,b) {return a+b};</P><P>sum</P></PRE>
<DIV id=out0197 class="OUTPUT SUCCESS"><B>function sum(a,b)</B><BR></DIV>
<DIV id=sect0186 class=SECTION sizcache="1" sizset="47">
<H3 class=SECTIONTITLE contentEditable=false>3.2.1 jc.inspect</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="47">
<DIV id=rich0187 class=RICHTEXT contentEditable=false>
<P>sometime you need to be close to the technical result, and the native format is to ambigous. this is specially the case with array that looks very much like a string, specially if empty</P>
<P><STRONG>jc.inspect</STRONG> give you a better technical representation</P>
<P>&nbsp;</P></DIV><PRE id=code0188 class=CODE contentEditable=false>jc.inspect(2+3)</PRE>
<DIV id=out0188 class="OUTPUT SUCCESS">5</DIV><PRE id=code0189 class=CODE contentEditable=false>jc.inspect('toto')</PRE>
<DIV id=out0189 class="OUTPUT SUCCESS"><SPAN class=INSPECT>"toto"</SPAN></DIV><PRE id=code0190 class=CODE contentEditable=false>jc.inspect([1,2])</PRE>
<DIV id=out0190 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>2</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0192 class=CODE contentEditable=false>jc.inspect([])</PRE>
<DIV id=out0192 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[] </LEGEND>
<TABLE class=INSPECT>
<TBODY></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0194 class=CODE contentEditable=false>jc.inspect({toto:1,tutu:{firstName:'tutu',lastName:'Smith'}})</PRE>
<DIV id=out0194 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>toto</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>tutu</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0195 class=RICHTEXT contentEditable=false>jc.inspect can also work at a certain level of depth. be carefull however that it can often generate very big amount of data if missused, also note that you can give a legend </DIV><PRE id=code0196 class=CODE contentEditable=false>jc.inspect({toto:1,tutu:{firstName:'tutu',lastName:'Smith'}},'my legend',2)</PRE>
<DIV id=out0196 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} my legend</LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>toto</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>tutu</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>firstName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>tutu</TD></TR>
<TR>
<TH vAlign=top>lastName</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Smith</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0200 class=CODE contentEditable=false><P>function sum(a,b) {return a+b};</P><P>sum.c= 5;</P><P>jc.inspect(sum)</P></PRE>
<DIV id=out0200 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>function sum(a,b) </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>c</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>5</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0201 class=CODE contentEditable=false>jc.inspect(aTable,'another legend',2)</PRE>
<DIV id=out0201 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Table(aTable) of 3 rows] another legend</LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>0</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(col)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (col,value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;func&nbsp;must&nbsp;be&nbsp;function(colname,colObject)</TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (options)</B><BR></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(col)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (col,value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;func&nbsp;must&nbsp;be&nbsp;function(colname,colObject)</TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (options)</B><BR></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>[object Row] </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>_</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Object]</TD></TR>
<TR>
<TH vAlign=top>table</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(col)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (col,value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>eachCol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;func&nbsp;must&nbsp;be&nbsp;function(colname,colObject)</TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (options)</B><BR></TD></TR>
<TR>
<TH vAlign=top>list</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>isRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>true</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><SPAN class=INSPECT>"aTable"</SPAN></TD></TR>
<TR>
<TH vAlign=top>length</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>3</TD></TR>
<TR>
<TH vAlign=top>_cols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>id</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>col1</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>col2</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR>
<TR>
<TH vAlign=top>col3</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>1</TD></TR></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>_id</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY></TBODY></TABLE></FIELDSET></DIV></TD></TR>
<TR>
<TH vAlign=top>cols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(cols)</B><BR>&nbsp;set&nbsp;the&nbsp;columns&nbsp;that&nbsp;are&nbsp;displayed&nbsp;by&nbsp;default<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining<BR>&nbsp;cols&nbsp;is&nbsp;an&nbsp;object&nbsp;like<BR>&nbsp;{&nbsp;colname:&nbsp;true,&nbsp;&nbsp;&nbsp;//&nbsp;any&nbsp;value&nbsp;make&nbsp;the&nbsp;column&nbsp;visible<BR>&nbsp;&nbsp;&nbsp;colname:{style:"css&nbsp;style"&nbsp;&nbsp;//&nbsp;like&nbsp;</TD></TR>
<TR>
<TH vAlign=top>updateCols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(withRow)</B><BR>&nbsp;updates&nbsp;the&nbsp;cols&nbsp;description&nbsp;with&nbsp;the&nbsp;fields&nbsp;found&nbsp;in&nbsp;withRow<BR>&nbsp;normally&nbsp;for&nbsp;internal&nbsp;use&nbsp;only<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>add</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row)</B><BR>&nbsp;add&nbsp;a&nbsp;row<BR>&nbsp;row&nbsp;can&nbsp;be&nbsp;either&nbsp;a&nbsp;simple&nbsp;object&nbsp;or&nbsp;a&nbsp;Row&nbsp;object<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;method&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>addRows</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(rows)</B><BR>&nbsp;add&nbsp;multiple&nbsp;rows<BR>&nbsp;rows&nbsp;must&nbsp;be&nbsp;an&nbsp;array&nbsp;or&nbsp;array-like&nbsp;of&nbsp;objects<BR>&nbsp;columns&nbsp;are&nbsp;ajusted&nbsp;automatically</TD></TR>
<TR>
<TH vAlign=top>forEachRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;execute&nbsp;func&nbsp;for&nbsp;each&nbsp;row&nbsp;of&nbsp;the&nbsp;table<BR>&nbsp;func&nbsp;must&nbsp;be&nbsp;function(i,row)<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row,col)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row,col,value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>sort</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(cols)</B><BR>&nbsp;sort&nbsp;the&nbsp;table&nbsp;according&nbsp;to&nbsp;the&nbsp;"cols"&nbsp;criteria<BR>&nbsp;cols&nbsp;is&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;form:<BR>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;col1:&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1&nbsp;means&nbsp;ascending&nbsp;&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:-1&nbsp;&nbsp;&nbsp;&nbsp;//-1&nbsp;means&nbsp;descending&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col3:&nbsp;function(a,b)&nbsp;{...&nbsp;//&nbsp;any&nbsp;function&nbsp;that&nbsp;compare&nbsp;a&nbsp;and&nbsp;b&nbsp;and&nbsp;returns&nbsp;&gt;0&nbsp;if&nbsp;a&gt;b,&nbsp;&lt;0&nbsp;if&nbsp;a&lt;b,&nbsp;0&nbsp;if&nbsp;a==b<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;return&nbsp;a&nbsp;string&nbsp;summarizing&nbsp;the&nbsp;table</TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>&nbsp;display&nbsp;the&nbsp;table&nbsp;without&nbsp;its&nbsp;name<BR>&nbsp;the&nbsp;span(options)&nbsp;method&nbsp;of&nbsp;table&nbsp;can&nbsp;take&nbsp;many&nbsp;option&nbsp;to&nbsp;customize&nbsp;the&nbsp;presentation&nbsp;of&nbsp;the&nbsp;table<BR>&nbsp;options:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;cols:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col1:{className:'HEAD'},&nbsp;&nbsp;//&nbsp;set&nbsp;the&nbsp;class(es)&nbsp;of&nbsp;this&nbsp;col<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;any&nbsp;value&nbsp;make&nbsp;this&nbsp;col&nbsp;visible<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'*':1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adds&nbsp;any&nbsp;not&nbsp;already&nbsp;defined&nbsp;col&nbsp;as&nbsp;visible</TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>display&nbsp;the&nbsp;table,&nbsp;including&nbsp;its&nbsp;name&nbsp;in&nbsp;a&nbsp;&lt;div&gt;</TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>&nbsp;edit&nbsp;is&nbsp;similar&nbsp;to&nbsp;span,&nbsp;but&nbsp;gernerates&nbsp;HTML&nbsp;code&nbsp;in&nbsp;order&nbsp;to&nbsp;edit&nbsp;the&nbsp;object&nbsp;interactively<BR>&nbsp;it&nbsp;will&nbsp;also&nbsp;set&nbsp;the&nbsp;code&nbsp;to&nbsp;AUTOEDIT&nbsp;class&nbsp;which&nbsp;means&nbsp;that&nbsp;it&nbsp;should&nbsp;no&nbsp;longer&nbsp;be&nbsp;modified&nbsp;by&nbsp;the&nbsp;user&nbsp;since&nbsp;it&nbsp;will<BR>&nbsp;be&nbsp;generated&nbsp;by&nbsp;the&nbsp;edition&nbsp;mecanism.</TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;generate&nbsp;the&nbsp;code&nbsp;that&nbsp;represents&nbsp;the&nbsp;element&nbsp;as&nbsp;edited<BR>&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;replace&nbsp;the&nbsp;existing&nbsp;code&nbsp;</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV>
<DIV id=sect0202 class=SECTION sizcache="1" sizset="55">
<H3 class=SECTIONTITLE contentEditable=false>3.2.2 jc.help</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="55">
<DIV id=rich0203 class=RICHTEXT contentEditable=false>jc.help show the essential of a function</DIV><PRE id=code0204 class=CODE contentEditable=false>jc.help(v)</PRE>
<DIV id=out0204 class="OUTPUT SUCCESS"><B>function v(name,value)</B><BR>&nbsp;v(name)&nbsp;returns&nbsp;the&nbsp;variable&nbsp;name:&nbsp;rarely&nbsp;used&nbsp;since&nbsp;name&nbsp;alone&nbsp;will&nbsp;represent&nbsp;the&nbsp;same&nbsp;as&nbsp;well&nbsp;as&nbsp;jc.vars[name]<BR>&nbsp;v(name,value)&nbsp;creates&nbsp;a&nbsp;new&nbsp;variable&nbsp;if&nbsp;it&nbsp;does&nbsp;not&nbsp;already&nbsp;exists&nbsp;and&nbsp;sets&nbsp;a&nbsp;new&nbsp;value</DIV>
<DIV id=rich0206 class=RICHTEXT contentEditable=false sizcache="1" sizset="56">without parameters, jc.help show the help of <SPAN id=code0207 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0207 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN></DIV><PRE id=code0205 class=CODE contentEditable=false>jc.help()</PRE>
<DIV id=out0205 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} jc.credits</LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>name</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>JCalc</TD></TR>
<TR>
<TH vAlign=top>version</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>0.1</TD></TR>
<TR>
<TH vAlign=top>authors</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>Marc&nbsp;Nicole</TD></TR></TBODY></TABLE></FIELDSET></DIV>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} jc</LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>inspect</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(obj,name,depth)</B><BR></TD></TR>
<TR>
<TH vAlign=top>keys</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(obj)</B><BR>&nbsp;returns&nbsp;an&nbsp;Array&nbsp;with&nbsp;all&nbsp;keys&nbsp;(=properties)&nbsp;of&nbsp;an&nbsp;object</TD></TR>
<TR>
<TH vAlign=top>copy</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(obj)</B><BR>&nbsp;makes&nbsp;a&nbsp;copy&nbsp;of&nbsp;obj&nbsp;this&nbsp;version&nbsp;only&nbsp;copies&nbsp;the&nbsp;first&nbsp;level<BR>&nbsp;does&nbsp;not&nbsp;copy&nbsp;any&nbsp;inheritance&nbsp;(result&nbsp;is&nbsp;an&nbsp;Object&nbsp;instance)</TD></TR>
<TR>
<TH vAlign=top>pad</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(integer,numberOfDigits)</B><BR></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(html)</B><BR>&nbsp;transform&nbsp;the&nbsp;content&nbsp;(from&nbsp;innerHTML)&nbsp;to&nbsp;a&nbsp;string&nbsp;as&nbsp;if&nbsp;this&nbsp;content&nbsp;is&nbsp;a&nbsp;text&nbsp;editor<BR>&nbsp;removes&nbsp;any&nbsp;tags&nbsp;other&nbsp;than&nbsp;&lt;BR&gt;&nbsp;and&nbsp;&lt;P&gt;</TD></TR>
<TR>
<TH vAlign=top>toHtml</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(code)</B><BR>&nbsp;transform&nbsp;htmlCode&nbsp;in&nbsp;such&nbsp;a&nbsp;manner&nbsp;that&nbsp;the&nbsp;code&nbsp;can&nbsp;be&nbsp;visualised&nbsp;in&nbsp;a&nbsp;&lt;pre&gt;...</TD></TR>
<TR>
<TH vAlign=top>codeExample</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(example)</B><BR></TD></TR>
<TR>
<TH vAlign=top>findInArrayOfObject</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(criteria,a)</B><BR>&nbsp;find&nbsp;the&nbsp;first&nbsp;object&nbsp;in&nbsp;the&nbsp;array&nbsp;of&nbsp;object&nbsp;a&nbsp;that&nbsp;has&nbsp;all&nbsp;criteria&nbsp;true<BR>&nbsp;example&nbsp;jc.findInArrayOfObject({toto:5},[{toto:1,tutu:5},{toto:5}])<BR>&nbsp;will&nbsp;return&nbsp;1</TD></TR>
<TR>
<TH vAlign=top>help</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;returns&nbsp;the&nbsp;signature&nbsp;of&nbsp;the&nbsp;function&nbsp;and&nbsp;the&nbsp;first&nbsp;comment&nbsp;in&nbsp;a&nbsp;pretty&nbsp;html&nbsp;<BR>&nbsp;-&nbsp;func:&nbsp;the&nbsp;function&nbsp;to&nbsp;be&nbsp;inspected<BR>&nbsp;if&nbsp;func&nbsp;is&nbsp;undefined&nbsp;returns&nbsp;all&nbsp;helps&nbsp;of&nbsp;all&nbsp;installed&nbsp;modules</TD></TR>
<TR>
<TH vAlign=top>testStatus</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;set&nbsp;a&nbsp;finalize&nbsp;function&nbsp;that&nbsp;will&nbsp;write&nbsp;to&nbsp;the&nbsp;current&nbsp;output&nbsp;the&nbsp;number&nbsp;of&nbsp;test&nbsp;Failure<BR>&nbsp;in&nbsp;the&nbsp;section&nbsp;that&nbsp;includes&nbsp;the&nbsp;code&nbsp;that&nbsp;executes&nbsp;this&nbsp;function<BR>&nbsp;mostly&nbsp;used&nbsp;in&nbsp;a&nbsp;small&nbsp;code&nbsp;inside&nbsp;the&nbsp;title&nbsp;of&nbsp;a&nbsp;section&nbsp;to&nbsp;summerize&nbsp;the&nbsp;tests&nbsp;below</TD></TR>
<TR>
<TH vAlign=top>link</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>undefined</TD></TR></TBODY></TABLE></FIELDSET></DIV>
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} jc.Units</LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>converts</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(value,from,to)</B><BR>&nbsp;convert&nbsp;the&nbsp;value&nbsp;from&nbsp;unit&nbsp;"from"&nbsp;to&nbsp;"to"<BR>&nbsp;an&nbsp;error&nbsp;is&nbsp;thrown&nbsp;if&nbsp;the&nbsp;2&nbsp;units&nbsp;are&nbsp;not&nbsp;from&nbsp;the&nbsp;same&nbsp;type</TD></TR>
<TR>
<TH vAlign=top>symbole</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(unit)</B><BR>&nbsp;returns&nbsp;the&nbsp;"pretty"&nbsp;symbole&nbsp;for&nbsp;unit&nbsp;or&nbsp;unit&nbsp;itself&nbsp;if&nbsp;none&nbsp;if&nbsp;found</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0143 class=SECTION sizcache="1" sizset="58">
<H2 class=SECTIONTITLE contentEditable=false>3.3 General methods</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="58">
<DIV id=rich0144 class=RICHTEXT contentEditable=false sizcache="1" sizset="58">in the <SPAN id=code0146 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0146 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> there are some methods that all object implements</DIV>
<DIV id=sect0145 class=SECTION>
<H3 class=SECTIONTITLE contentEditable=false>3.3.1 toString</H3>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0147 class=RICHTEXT contentEditable=false>
<P>the toString method is implemented on all Classes an returns a one line string summary of the object using the same format</P>
<P><STRONG>[object Class(instanceName) some high level information]</STRONG></P>
<P>this string is usefull if you want to have a short summary of the object. This is what jc.inspect uses to show the inside of the object.</P></DIV></DIV></DIV>
<DIV id=sect0152 class=SECTION>
<H3 class=SECTIONTITLE contentEditable=false>3.3.2 valueOf</H3>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0153 class=RICHTEXT contentEditable=false>the most essential (if any) value caracterising the object. Normally returns a Number or a String.</DIV></DIV></DIV>
<DIV id=sect0148 class=SECTION>
<H3 class=SECTIONTITLE contentEditable=false>3.3.3 span</H3>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0149 class=RICHTEXT contentEditable=false>returns a HTML object containing the html code of the representation for this object. span shows it with a &lt;SPAN&gt; tag or directly with the necessary tag (like &lt;TABLE&gt;) so that the representation can be embedded inside the text stream. Sometimes, span has optional parameters to specify how to display it</DIV></DIV></DIV>
<DIV id=sect0150 class=SECTION>
<H3 class=SECTIONTITLE contentEditable=false>3.3.4 view</H3>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0151 class=RICHTEXT contentEditable=false>similar to span and also returns an HTML object, but displayed in a &lt;DIV&gt; and displaying more informations like the instance name or other usefull information</DIV></DIV></DIV>
<DIV id=sect0154 class=SECTION sizcache="1" sizset="59">
<H3 class=SECTIONTITLE contentEditable=false>3.3.5 method chaining</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="59">
<DIV id=rich0155 class=RICHTEXT contentEditable=false sizcache="1" sizset="59">
<P>most methods returns the calling object excepted when the method clearly specifies another result. so method chaining is easy like</P>
<P sizcache="1" sizset="59"><SPAN id=code0156 class="CODE EMBEDDED" style="DISPLAY: none">jc.codeExample("table('myTable').add({some row}).addRows([...]).sort()")</SPAN><SPAN id=out0156 class="OUTPUT SUCCESS" contentEditable=false><SPAN class=CODEEXAMPLE>table('myTable').add({some row}).addRows([...]).sort()</SPAN></SPAN></P></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0095 class=SECTION sizcache="1" sizset="60">
<H2 class=SECTIONTITLE contentEditable=false>3.4 Table</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="60">
<DIV id=rich0096 class=RICHTEXT contentEditable=false sizcache="1" sizset="60">
<P>another class is Table that is very usefull. </P>
<P sizcache="1" sizset="60">In <SPAN id=code0102 class="CODE EMBEDDED" style="DISPLAY: none">jc.name</SPAN><SPAN id=out0102 class="OUTPUT SUCCESS" contentEditable=false>JCalc</SPAN> a Table is an array of Row which can be seen as a simple object with key:value.</P>
<P>&nbsp;</P>
<P>in order to create a new table just use the <STRONG>table</STRONG> function</P>
<P sizcache="1" sizset="61"><SPAN id=code0140 class="CODE EMBEDDED" style="DISPLAY: none">jc.help(table)</SPAN><SPAN id=out0140 class="OUTPUT SUCCESS" contentEditable=false><B>function(name,local)</B><BR>&nbsp;returns&nbsp;an&nbsp;already&nbsp;existing&nbsp;table&nbsp;or&nbsp;creates&nbsp;a&nbsp;new&nbsp;table<BR>&nbsp;-&nbsp;name&nbsp;is&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;instance<BR>&nbsp;-&nbsp;if&nbsp;local=true,&nbsp;the&nbsp;instance&nbsp;is&nbsp;not&nbsp;registered&nbsp;in&nbsp;v</SPAN></P>
<P>just start with an example</P></DIV><PRE id=code0101 class=CODE contentEditable=false><P>table('myTable')</P><P>.add({_id:'zero',col1:1,col2:2,col3:3})</P><P>.add({_id:'one' ,col1:10,col2:20,col3:30})</P><P>.add({_id:'two' ,col1:100,col2:200,col3:300})</P></PRE>
<DIV id=out0101 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>zero</TH>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TH>one</TH>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0103 class=RICHTEXT contentEditable=false>now <STRONG>myTable</STRONG> is created in the same name space as the variables created with&nbsp;<STRONG>v</STRONG>()&nbsp; which is located in <STRONG>jc.vars</STRONG></DIV><PRE id=code0104 class=CODE contentEditable=false>jc.inspect(jc.vars)</PRE>
<DIV id=out0104 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>myVariable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;V(myVariable):its&nbsp;value]</TD></TR>
<TR>
<TH vAlign=top>currentPrice$USD</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;V(currentPrice$USD):1234]</TD></TR>
<TR>
<TH vAlign=top>aTable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(aTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR>
<TR>
<TH vAlign=top>myTable</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object&nbsp;Table(myTable)&nbsp;of&nbsp;3&nbsp;rows]</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV>
<DIV id=rich0112 class=RICHTEXT contentEditable=false>a Table object is an array like, so each row can be found using [x]</DIV><PRE id=code0113 class=CODE contentEditable=false>myTable[2]</PRE>
<DIV id=out0113 class="OUTPUT SUCCESS">
<TABLE cellSpacing=0 cellPadding=4>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0114 class=RICHTEXT contentEditable=false>every row is an object so the column can be found using either [] or the dot notation</DIV><PRE id=code0115 class=CODE contentEditable=false>myTable[2]</PRE>
<DIV id=out0115 class="OUTPUT SUCCESS">
<TABLE cellSpacing=0 cellPadding=4>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV><PRE id=code0116 class=CODE contentEditable=false>myTable[2]._['col3']</PRE>
<DIV id=out0116 class="OUTPUT SUCCESS">300</DIV><PRE id=code0220 class=CODE contentEditable=false><P>// exactly the same as above:</P><P>myTable[2]._.col3</P></PRE>
<DIV id=out0220 class="OUTPUT SUCCESS">300</DIV><PRE id=code0221 class=CODE contentEditable=false><P>// or another method</P><P>myTable.cell(2,'col3')</P></PRE>
<DIV id=out0221 class="OUTPUT SUCCESS">300</DIV>
<DIV id=sect0119 class=SECTION sizcache="1" sizset="69">
<H3 class=SECTIONTITLE contentEditable=false>3.4.1 span</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="69">
<DIV id=rich0120 class=RICHTEXT contentEditable=false sizcache="1" sizset="69">
<P sizcache="1" sizset="69"><SPAN id=code0121 class="CODE EMBEDDED" style="DISPLAY: none">jc.help(myTable.span)</SPAN><SPAN id=out0121 class="OUTPUT SUCCESS" contentEditable=false><B>function(options)</B><BR>&nbsp;display&nbsp;the&nbsp;table&nbsp;without&nbsp;its&nbsp;name<BR>&nbsp;the&nbsp;span(options)&nbsp;method&nbsp;of&nbsp;table&nbsp;can&nbsp;take&nbsp;many&nbsp;option&nbsp;to&nbsp;customize&nbsp;the&nbsp;presentation&nbsp;of&nbsp;the&nbsp;table<BR>&nbsp;options:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;cols:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col1:{className:'HEAD'},&nbsp;&nbsp;//&nbsp;set&nbsp;the&nbsp;class(es)&nbsp;of&nbsp;this&nbsp;col<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;any&nbsp;value&nbsp;make&nbsp;this&nbsp;col&nbsp;visible<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'*':1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adds&nbsp;any&nbsp;not&nbsp;already&nbsp;defined&nbsp;col&nbsp;as&nbsp;visible</SPAN></P></DIV><PRE id=code0123 class=CODE contentEditable=false><P>myTable.span({cols:{_id:1,col1:1}});</P></PRE>
<DIV id=out0123 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH></TR></THEAD>
<TBODY>
<TR>
<TH>zero</TH>
<TD>1</TD></TR>
<TR>
<TH>one</TH>
<TD>10</TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD></TR></TBODY></TABLE></DIV><PRE id=code0124 class=CODE contentEditable=false>myTable.span({cols:{col1:{head:1,className:'RIGHT'},col2:1}})</PRE>
<DIV id=out0124 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>col1</TH>
<TH>col2</TH></TR></THEAD>
<TBODY>
<TR>
<TH class=RIGHT>1</TH>
<TD>2</TD></TR>
<TR>
<TH class=RIGHT>10</TH>
<TD>20</TD></TR>
<TR>
<TH class=RIGHT>100</TH>
<TD>200</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=rich0118 class=RICHTEXT contentEditable=false></DIV>
<DIV id=sect0126 class=SECTION sizcache="1" sizset="72">
<H3 class=SECTIONTITLE contentEditable=false>3.4.2 sort</H3>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="72">
<DIV id=rich0127 class=RICHTEXT contentEditable=false sizcache="1" sizset="72"><SPAN id=code0128 class="CODE EMBEDDED" style="DISPLAY: none">jc.help(myTable.sort)</SPAN><SPAN id=out0128 class="OUTPUT SUCCESS" contentEditable=false><B>function(cols)</B><BR>&nbsp;sort&nbsp;the&nbsp;table&nbsp;according&nbsp;to&nbsp;the&nbsp;"cols"&nbsp;criteria<BR>&nbsp;cols&nbsp;is&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;form:<BR>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;col1:&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1&nbsp;means&nbsp;ascending&nbsp;&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:-1&nbsp;&nbsp;&nbsp;&nbsp;//-1&nbsp;means&nbsp;descending&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col3:&nbsp;function(a,b)&nbsp;{...&nbsp;//&nbsp;any&nbsp;function&nbsp;that&nbsp;compare&nbsp;a&nbsp;and&nbsp;b&nbsp;and&nbsp;returns&nbsp;&gt;0&nbsp;if&nbsp;a&gt;b,&nbsp;&lt;0&nbsp;if&nbsp;a&lt;b,&nbsp;0&nbsp;if&nbsp;a==b<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</SPAN></DIV><PRE id=code0129 class=CODE contentEditable=false>myTable.sort({_id:1})</PRE>
<DIV id=out0129 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>one</TH>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TH>zero</TH>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR></TBODY></TABLE></DIV><PRE id=code0130 class=CODE contentEditable=false>myTable.sort({_id:-1})</PRE>
<DIV id=out0130 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>zero</TH>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TH>one</TH>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0131 class=RICHTEXT contentEditable=false>
<P>note that <STRONG>sort</STRONG> sorts in place the table, so the row number are different</P></DIV><PRE id=code0132 class=CODE contentEditable=false>myTable[1]</PRE>
<DIV id=out0132 class="OUTPUT SUCCESS">
<TABLE cellSpacing=0 cellPadding=4>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0133 class=RICHTEXT contentEditable=false></DIV><PRE id=code0134 class=CODE contentEditable=false>myTable.view()</PRE>
<DIV id=out0134 class="OUTPUT SUCCESS">
<DIV><VAR>myTable</VAR>
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH></TR></THEAD>
<TBODY>
<TR>
<TH>zero</TH>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD></TR>
<TR>
<TH>one</TH>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV id=sect0136 class=SECTION sizcache="1" sizset="77">
<H4 class=SECTIONTITLE contentEditable=false>3.4.2.1 addRows</H4>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="77"><PRE id=code0137 class=CODE contentEditable=false>jc.help(Table.prototype.addRows)</PRE>
<DIV id=out0137 class="OUTPUT SUCCESS"><B>function(rows)</B><BR>&nbsp;add&nbsp;multiple&nbsp;rows<BR>&nbsp;rows&nbsp;must&nbsp;be&nbsp;an&nbsp;array&nbsp;or&nbsp;array-like&nbsp;of&nbsp;objects<BR>&nbsp;columns&nbsp;are&nbsp;ajusted&nbsp;automatically</DIV><PRE id=code0138 class=CODE contentEditable=false><P>myTable.addRows([</P><P>{_id:'four',col1:1000,col4:4000},</P><P>{_id:'five',col1:10000,col4:40000}]);</P></PRE>
<DIV id=out0138 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>_id</TH>
<TH>col1</TH>
<TH>col2</TH>
<TH>col3</TH>
<TH>col4</TH></TR></THEAD>
<TBODY>
<TR>
<TH>zero</TH>
<TD>1</TD>
<TD>2</TD>
<TD>3</TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TH>two</TH>
<TD>100</TD>
<TD>200</TD>
<TD>300</TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TH>one</TH>
<TD>10</TD>
<TD>20</TD>
<TD>30</TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD></TR>
<TR>
<TH>four</TH>
<TD>1000</TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD>4000</TD></TR>
<TR>
<TH>five</TH>
<TD>10000</TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD><SPAN style="COLOR: red">undefined</SPAN></TD>
<TD>40000</TD></TR></TBODY></TABLE></DIV></DIV></DIV></DIV></DIV>
<DIV id=rich0136 class=RICHTEXT contentEditable=false>
<P>You can always inspect a class prototype to have information on the different methods</P></DIV><PRE id=code0122 class=CODE contentEditable=false>jc.inspect(Table.prototype)</PRE>
<DIV id=out0122 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND>{} </LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>cols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(cols)</B><BR>&nbsp;set&nbsp;the&nbsp;columns&nbsp;that&nbsp;are&nbsp;displayed&nbsp;by&nbsp;default<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining<BR>&nbsp;cols&nbsp;is&nbsp;an&nbsp;object&nbsp;like<BR>&nbsp;{&nbsp;colname:&nbsp;true,&nbsp;&nbsp;&nbsp;//&nbsp;any&nbsp;value&nbsp;make&nbsp;the&nbsp;column&nbsp;visible<BR>&nbsp;&nbsp;&nbsp;colname:{style:"css&nbsp;style"&nbsp;&nbsp;//&nbsp;like&nbsp;</TD></TR>
<TR>
<TH vAlign=top>updateCols</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(withRow)</B><BR>&nbsp;updates&nbsp;the&nbsp;cols&nbsp;description&nbsp;with&nbsp;the&nbsp;fields&nbsp;found&nbsp;in&nbsp;withRow<BR>&nbsp;normally&nbsp;for&nbsp;internal&nbsp;use&nbsp;only<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>add</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row)</B><BR>&nbsp;add&nbsp;a&nbsp;row<BR>&nbsp;row&nbsp;can&nbsp;be&nbsp;either&nbsp;a&nbsp;simple&nbsp;object&nbsp;or&nbsp;a&nbsp;Row&nbsp;object<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;method&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>addRows</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(rows)</B><BR>&nbsp;add&nbsp;multiple&nbsp;rows<BR>&nbsp;rows&nbsp;must&nbsp;be&nbsp;an&nbsp;array&nbsp;or&nbsp;array-like&nbsp;of&nbsp;objects<BR>&nbsp;columns&nbsp;are&nbsp;ajusted&nbsp;automatically</TD></TR>
<TR>
<TH vAlign=top>forEachRow</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(func)</B><BR>&nbsp;execute&nbsp;func&nbsp;for&nbsp;each&nbsp;row&nbsp;of&nbsp;the&nbsp;table<BR>&nbsp;func&nbsp;must&nbsp;be&nbsp;function(i,row)<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>cell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row,col)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setCell</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(row,col,value)</B><BR></TD></TR>
<TR>
<TH vAlign=top>sort</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(cols)</B><BR>&nbsp;sort&nbsp;the&nbsp;table&nbsp;according&nbsp;to&nbsp;the&nbsp;"cols"&nbsp;criteria<BR>&nbsp;cols&nbsp;is&nbsp;an&nbsp;object&nbsp;of&nbsp;the&nbsp;form:<BR>&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;col1:&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1&nbsp;means&nbsp;ascending&nbsp;&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:-1&nbsp;&nbsp;&nbsp;&nbsp;//-1&nbsp;means&nbsp;descending&nbsp;alphabetic&nbsp;or&nbsp;numeric&nbsp;order<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col3:&nbsp;function(a,b)&nbsp;{...&nbsp;//&nbsp;any&nbsp;function&nbsp;that&nbsp;compare&nbsp;a&nbsp;and&nbsp;b&nbsp;and&nbsp;returns&nbsp;&gt;0&nbsp;if&nbsp;a&gt;b,&nbsp;&lt;0&nbsp;if&nbsp;a&lt;b,&nbsp;0&nbsp;if&nbsp;a==b<BR>&nbsp;return&nbsp;the&nbsp;table&nbsp;for&nbsp;command&nbsp;chaining</TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;return&nbsp;a&nbsp;string&nbsp;summarizing&nbsp;the&nbsp;table</TD></TR>
<TR>
<TH vAlign=top>toJSON</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>&nbsp;display&nbsp;the&nbsp;table&nbsp;without&nbsp;its&nbsp;name<BR>&nbsp;the&nbsp;span(options)&nbsp;method&nbsp;of&nbsp;table&nbsp;can&nbsp;take&nbsp;many&nbsp;option&nbsp;to&nbsp;customize&nbsp;the&nbsp;presentation&nbsp;of&nbsp;the&nbsp;table<BR>&nbsp;options:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;cols:{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col1:{className:'HEAD'},&nbsp;&nbsp;//&nbsp;set&nbsp;the&nbsp;class(es)&nbsp;of&nbsp;this&nbsp;col<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col2:1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;any&nbsp;value&nbsp;make&nbsp;this&nbsp;col&nbsp;visible<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'*':1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adds&nbsp;any&nbsp;not&nbsp;already&nbsp;defined&nbsp;col&nbsp;as&nbsp;visible</TD></TR>
<TR>
<TH vAlign=top>view</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>display&nbsp;the&nbsp;table,&nbsp;including&nbsp;its&nbsp;name&nbsp;in&nbsp;a&nbsp;&lt;div&gt;</TD></TR>
<TR>
<TH vAlign=top>edit</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(options)</B><BR>&nbsp;edit&nbsp;is&nbsp;similar&nbsp;to&nbsp;span,&nbsp;but&nbsp;gernerates&nbsp;HTML&nbsp;code&nbsp;in&nbsp;order&nbsp;to&nbsp;edit&nbsp;the&nbsp;object&nbsp;interactively<BR>&nbsp;it&nbsp;will&nbsp;also&nbsp;set&nbsp;the&nbsp;code&nbsp;to&nbsp;AUTOEDIT&nbsp;class&nbsp;which&nbsp;means&nbsp;that&nbsp;it&nbsp;should&nbsp;no&nbsp;longer&nbsp;be&nbsp;modified&nbsp;by&nbsp;the&nbsp;user&nbsp;since&nbsp;it&nbsp;will<BR>&nbsp;be&nbsp;generated&nbsp;by&nbsp;the&nbsp;edition&nbsp;mecanism.</TD></TR>
<TR>
<TH vAlign=top>getEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>setEditableValue</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(editor)</B><BR></TD></TR>
<TR>
<TH vAlign=top>updateCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;generate&nbsp;the&nbsp;code&nbsp;that&nbsp;represents&nbsp;the&nbsp;element&nbsp;as&nbsp;edited<BR>&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;replace&nbsp;the&nbsp;existing&nbsp;code&nbsp;</TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV><PRE id=code0117 class=CODE contentEditable=false></PRE>
<DIV id=out0117 class="OUTPUT SUCCESS"><SPAN style="COLOR: red">undefined</SPAN></DIV></DIV></DIV>
<DIV id=sect0209 class=SECTION sizcache="1" sizset="81">
<H2 class=SECTIONTITLE contentEditable=false>3.5 output</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="81">
<DIV id=rich0210 class=RICHTEXT contentEditable=false>so far</DIV><PRE id=code0211 class=CODE contentEditable=false>jc.inspect(output)</PRE>
<DIV id=out0211 class="OUTPUT SUCCESS">
<DIV class=INSPECT>
<FIELDSET><LEGEND></LEGEND>
<TABLE class=INSPECT>
<TBODY>
<TR>
<TH vAlign=top>htmlCode</TH>
<TD style="TEXT-ALIGN: left" vAlign=top></TD></TR>
<TR>
<TH vAlign=top>tagsEnd</TH>
<TD style="TEXT-ALIGN: left" vAlign=top></TD></TR>
<TR>
<TH vAlign=top>codeElement</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object]</TD></TR>
<TR>
<TH vAlign=top>outputElement</TH>
<TD style="TEXT-ALIGN: left" vAlign=top>[object]</TD></TR>
<TR>
<TH vAlign=top>span</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>toString</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>removeJQueryAttr</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR></TD></TR>
<TR>
<TH vAlign=top>toAscii</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;same&nbsp;as&nbsp;toString(),&nbsp;but&nbsp;no&nbsp;character&nbsp;is&nbsp;bigger&nbsp;than&nbsp;&amp;#255;&nbsp;every&nbsp;such&nbsp;a&nbsp;character&nbsp;is&nbsp;transformed&nbsp;into&nbsp;&amp;#xxx;<BR>&nbsp;Needed&nbsp;for&nbsp;this&nbsp;/&amp;ç&amp;"@&nbsp;activeX&nbsp;of&nbsp;FileSystem</TD></TR>
<TR>
<TH vAlign=top>html</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (html)</B><BR>&nbsp;insert&nbsp;any&nbsp;html</TD></TR>
<TR>
<TH vAlign=top>showHtml</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (html)</B><BR>&nbsp;show&nbsp;html&nbsp;as&nbsp;html&nbsp;code</TD></TR>
<TR>
<TH vAlign=top>showDiff</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(e1,e2)</B><BR></TD></TR>
<TR>
<TH vAlign=top>showHtmlDiff</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(e1,e2)</B><BR></TD></TR>
<TR>
<TH vAlign=top>p</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>ul</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>ol</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>li</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>pre</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>hr</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function ()</B><BR></TD></TR>
<TR>
<TH vAlign=top>h</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function (/*elements*/)</B><BR></TD></TR>
<TR>
<TH vAlign=top>indent</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(levels)</B><BR>&nbsp;increment&nbsp;the&nbsp;header&nbsp;level<BR>&nbsp;levels:&nbsp;number&nbsp;of&nbsp;level&nbsp;to&nbsp;increment&nbsp;(default&nbsp;is&nbsp;1)</TD></TR>
<TR>
<TH vAlign=top>tag</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(tagNameAndAttributes /*,elements*/)</B><BR>&nbsp;adds&nbsp;to&nbsp;the&nbsp;html&nbsp;&lt;tagNameAndAttributes&gt;span&nbsp;of&nbsp;all&nbsp;elements&lt;/tagName&gt;<BR>&nbsp;if&nbsp;element&nbsp;is&nbsp;empty,&nbsp;only&nbsp;adds&nbsp;&lt;tagNameAndAttributes&gt;&nbsp;and&nbsp;push&nbsp;the&nbsp;<BR>&nbsp;closing&nbsp;&lt;/tagName&gt;&nbsp;on&nbsp;the&nbsp;stack&nbsp;waiting&nbsp;for&nbsp;an&nbsp;.end()</TD></TR>
<TR>
<TH vAlign=top>_tag</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(tagNameAnAttributes ,elements)</B><BR></TD></TR>
<TR>
<TH vAlign=top>end</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function()</B><BR>&nbsp;close&nbsp;the&nbsp;last&nbsp;opened&nbsp;tag</TD></TR>
<TR>
<TH vAlign=top>inspect</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(/*objects*/)</B><BR>&nbsp;adds&nbsp;to&nbsp;the&nbsp;HTML&nbsp;object&nbsp;the&nbsp;inspection&nbsp;of&nbsp;all&nbsp;objects&nbsp;passed&nbsp;in&nbsp;parameters</TD></TR>
<TR>
<TH vAlign=top>interactiveDiv</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(style/*,iElements*/)</B><BR>&nbsp;adds&nbsp;an&nbsp;DIV&nbsp;that&nbsp;will&nbsp;allow&nbsp;interactivity&nbsp;of&nbsp;its&nbsp;internal&nbsp;component&nbsp;<BR>&nbsp;since&nbsp;it&nbsp;will&nbsp;prevent&nbsp;bubbling&nbsp;events&nbsp;up&nbsp;to&nbsp;the&nbsp;EDI<BR>&nbsp;it&nbsp;will&nbsp;also&nbsp;create&nbsp;an&nbsp;internal&nbsp;DIV&nbsp;position:relative&nbsp;so&nbsp;that&nbsp;<BR>&nbsp;internal&nbsp;component&nbsp;can&nbsp;be&nbsp;positionned&nbsp;in&nbsp;an&nbsp;absolute&nbsp;manner<BR>&nbsp;for&nbsp;all&nbsp;iElements&nbsp;passed&nbsp;in&nbsp;parameters&nbsp;.control()&nbsp;will&nbsp;be&nbsp;called</TD></TR>
<TR>
<TH vAlign=top>sendTo</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(jquerySelector)</B><BR></TD></TR>
<TR>
<TH vAlign=top>finalize</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(finalizationFunc)</B><BR>&nbsp;finalizationFunc&nbsp;must&nbsp;be&nbsp;a&nbsp;function()&nbsp;{...}<BR>&nbsp;note&nbsp;that&nbsp;as&nbsp;this&nbsp;function&nbsp;is&nbsp;defined&nbsp;within&nbsp;a&nbsp;code&nbsp;that&nbsp;will&nbsp;be&nbsp;created&nbsp;in&nbsp;secureEval,&nbsp;we&nbsp;are<BR>&nbsp;also&nbsp;inside&nbsp;with(v)&nbsp;so&nbsp;any&nbsp;user&nbsp;variable&nbsp;is&nbsp;availlable&nbsp;as&nbsp;well&nbsp;as&nbsp;output&nbsp;is&nbsp;availlable&nbsp;because&nbsp;of&nbsp;the&nbsp;closure&nbsp;mecanism</TD></TR>
<TR>
<TH vAlign=top>alert</TH>
<TD style="TEXT-ALIGN: left" vAlign=top><B>function(message)</B><BR></TD></TR></TBODY></TABLE></FIELDSET></DIV></DIV></DIV></DIV>
<DIV id=sect0158 class=SECTION sizcache="1" sizset="82">
<H2 class=SECTIONTITLE contentEditable=false>3.6 function delaration</H2>
<DIV class=SECTIONCONTAINER sizcache="1" sizset="82">
<DIV id=rich0159 class=RICHTEXT contentEditable=false sizcache="1" sizset="82">
<P>such a spreadsheet would be of no use if we can not make calculation.</P>
<P>&nbsp;</P>
<P sizcache="1" sizset="82">As we already have declared <SPAN id=code0161 class="CODE EMBEDDED" style="DISPLAY: none">currentPrice$USD.view()</SPAN><SPAN id=out0161 class="OUTPUT SUCCESS" contentEditable=false><VAR>currentPrice</VAR> = <SPAN class=VALUE>1234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></SPAN> we can now define the following <SPAN id=code0162 class="CODE EMBEDDED" style="DISPLAY: none">v('costOfGood$USD',1000).view()</SPAN><SPAN id=out0162 class="OUTPUT SUCCESS" contentEditable=false><VAR>costOfGood</VAR> = <SPAN class=VALUE>1000</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></SPAN></P>so now we can calculate the margin as a formula</DIV><PRE id=code0160 class=CODE contentEditable=false>v('margin$USD',f('currentPrice$USD-costOfGood$USD')).view()</PRE>
<DIV id=out0160 class="OUTPUT SUCCESS"><VAR>margin</VAR> = <SPAN class=VALUE>234</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV>
<DIV id=rich0163 class=RICHTEXT contentEditable=false>
<P>let explain a little bit of the magic of <STRONG>f()</STRONG></P>
<P>f takes a string parameter that will become the body of the function</P><PRE>function (row,col) {</PRE><PRE>  with (v) {</PRE><PRE>    with (row || {}) {</PRE><PRE>      <EM>return </EM>// your body will be here</PRE><PRE>    }</PRE><PRE>  }</PRE><PRE>}</PRE>
<P>let puts aside for a while (row,col). as we are inside a with(v), we have direct access to all previously defined variables.</P>
<P>This function will be stored inside <STRONG>margin$USD</STRONG> so any attempt to get its value will first recalculate the function. </P>
<P>Please note that <STRONG>return</STRONG> is automatically added at the beginning of your body if no return is found inside the body</P>
<P>&nbsp;</P>
<P>please note the you also could have written your own anonymous function like below:</P></DIV><PRE id=code0166 class=CODE contentEditable=false><P>v('vendorCommission$USD',function(){return jc.vars.currentPrice$USD*0.1}).view();</P></PRE>
<DIV id=out0166 class="OUTPUT SUCCESS"><VAR>vendorCommission</VAR> = <SPAN class=VALUE>123.4</SPAN>&nbsp;<SPAN class=UNIT>USD</SPAN></DIV>
<DIV id=rich0167 class=RICHTEXT contentEditable=false>
<P>as we have seen above the function is created with row, col parameters.</P>
<P>This is of use if the function is used inside a table.</P>
<P>Please note the explicit usage of span() in order to set another format for the numbers</P></DIV><PRE id=code0168 class=CODE contentEditable=false><P>table('myTable2').addRows([</P><P>{article:'apple',costOfGood$USD:1,margin$USD:0.5,listPrice$USD:f('costOfGood$USD+margin$USD')},</P><P>{article:'orange',costOfGood$USD:2,margin$USD:0.75,listPrice$USD:f('costOfGood$USD+margin$USD')},</P><P>{article:'pineApple',costOfGood$USD:5,margin$USD:1.5,listPrice$USD:f('costOfGood$USD+margin$USD')}])</P><P>.span({format:{number:jc.toFixed(2)}})</P></PRE>
<DIV id=out0168 class="OUTPUT SUCCESS">
<TABLE>
<THEAD>
<TR>
<TH>article</TH>
<TH>costOfGood$USD</TH>
<TH>margin$USD</TH>
<TH>listPrice$USD</TH></TR></THEAD>
<TBODY>
<TR>
<TD>apple</TD>
<TD>1.00</TD>
<TD>0.50</TD>
<TD>1.50</TD></TR>
<TR>
<TD>orange</TD>
<TD>2.00</TD>
<TD>0.75</TD>
<TD>2.75</TD></TR>
<TR>
<TD>pineApple</TD>
<TD>5.00</TD>
<TD>1.50</TD>
<TD>6.50</TD></TR></TBODY></TABLE></DIV>
<DIV id=rich0169 class=RICHTEXT contentEditable=false>Please note that the identificators are first found in the row and only search in v if not found in the row. so costOfGood$USD and margin$USD refers to the row, not the global variable previously defined. Of course you can still access those variable with <STRONG>v.costOfGood$USD</STRONG></DIV></DIV></DIV></DIV></DIV>
<DIV id=sect0047 class=SECTION>
<H1 class=SECTIONTITLE contentEditable=false>4 known issue:</H1>
<DIV class=SECTIONCONTAINER>
<DIV id=sect0050 class=SECTION>
<H2 class=SECTIONTITLE contentEditable=false>4.1 cut &amp; paste of text having code</H2>
<DIV class=SECTIONCONTAINER>
<DIV id=rich0051 class=RICHTEXT contentEditable=false>Currently, the code block will also be copied, but keeping the original id !!! this means many time the same id</DIV></DIV></DIV></DIV></DIV></DIV></BODY></HTML>